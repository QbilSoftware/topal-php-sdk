<?php
/**
 * TransactionsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Topal REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Topal\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Topal\Client\ApiException;
use Topal\Client\Configuration;
use Topal\Client\HeaderSelector;
use Topal\Client\ObjectSerializer;

/**
 * TransactionsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TransactionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'transactionsCreatePosting' => [
            'application/json',
        ],
        'transactionsDelete' => [
            'application/json',
        ],
        'transactionsDeleteDocument' => [
            'application/json',
        ],
        'transactionsDownloadDocument' => [
            'application/json',
        ],
        'transactionsGet' => [
            'application/json',
        ],
        'transactionsGetByDocNum' => [
            'application/json',
        ],
        'transactionsGetPendingDocuments' => [
            'application/json',
        ],
        'transactionsGetVatPosting' => [
            'application/json',
        ],
        'transactionsGet_0' => [
            'application/json',
        ],
        'transactionsLinkDocument' => [
            'application/json',
        ],
        'transactionsNew' => [
            'application/json',
        ],
        'transactionsPost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'transactionsUpload' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation transactionsCreatePosting
     *
     * create posting based on optinal parameters
     *
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  \DateTime $date date (optional)
     * @param  string $account_code account_code (optional)
     * @param  float $amount amount (optional)
     * @param  float $fc_amount fc_amount (optional)
     * @param  float $exchange_rate exchange_rate (optional)
     * @param  string $vat_code vat_code (optional)
     * @param  bool $is_inclusive is_inclusive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsCreatePosting'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Posting
     */
    public function transactionsCreatePosting($client_id, $fiscal_year_id, $date = null, $account_code = null, $amount = null, $fc_amount = null, $exchange_rate = null, $vat_code = null, $is_inclusive = null, string $contentType = self::contentTypes['transactionsCreatePosting'][0])
    {
        list($response) = $this->transactionsCreatePostingWithHttpInfo($client_id, $fiscal_year_id, $date, $account_code, $amount, $fc_amount, $exchange_rate, $vat_code, $is_inclusive, $contentType);
        return $response;
    }

    /**
     * Operation transactionsCreatePostingWithHttpInfo
     *
     * create posting based on optinal parameters
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  \DateTime $date (optional)
     * @param  string $account_code (optional)
     * @param  float $amount (optional)
     * @param  float $fc_amount (optional)
     * @param  float $exchange_rate (optional)
     * @param  string $vat_code (optional)
     * @param  bool $is_inclusive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsCreatePosting'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Posting, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsCreatePostingWithHttpInfo($client_id, $fiscal_year_id, $date = null, $account_code = null, $amount = null, $fc_amount = null, $exchange_rate = null, $vat_code = null, $is_inclusive = null, string $contentType = self::contentTypes['transactionsCreatePosting'][0])
    {
        $request = $this->transactionsCreatePostingRequest($client_id, $fiscal_year_id, $date, $account_code, $amount, $fc_amount, $exchange_rate, $vat_code, $is_inclusive, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Posting' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Posting' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Posting', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Posting';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Posting',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transactionsCreatePostingAsync
     *
     * create posting based on optinal parameters
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  \DateTime $date (optional)
     * @param  string $account_code (optional)
     * @param  float $amount (optional)
     * @param  float $fc_amount (optional)
     * @param  float $exchange_rate (optional)
     * @param  string $vat_code (optional)
     * @param  bool $is_inclusive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsCreatePosting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsCreatePostingAsync($client_id, $fiscal_year_id, $date = null, $account_code = null, $amount = null, $fc_amount = null, $exchange_rate = null, $vat_code = null, $is_inclusive = null, string $contentType = self::contentTypes['transactionsCreatePosting'][0])
    {
        return $this->transactionsCreatePostingAsyncWithHttpInfo($client_id, $fiscal_year_id, $date, $account_code, $amount, $fc_amount, $exchange_rate, $vat_code, $is_inclusive, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsCreatePostingAsyncWithHttpInfo
     *
     * create posting based on optinal parameters
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  \DateTime $date (optional)
     * @param  string $account_code (optional)
     * @param  float $amount (optional)
     * @param  float $fc_amount (optional)
     * @param  float $exchange_rate (optional)
     * @param  string $vat_code (optional)
     * @param  bool $is_inclusive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsCreatePosting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsCreatePostingAsyncWithHttpInfo($client_id, $fiscal_year_id, $date = null, $account_code = null, $amount = null, $fc_amount = null, $exchange_rate = null, $vat_code = null, $is_inclusive = null, string $contentType = self::contentTypes['transactionsCreatePosting'][0])
    {
        $returnType = '\Topal\Client\Model\Posting';
        $request = $this->transactionsCreatePostingRequest($client_id, $fiscal_year_id, $date, $account_code, $amount, $fc_amount, $exchange_rate, $vat_code, $is_inclusive, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsCreatePosting'
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  \DateTime $date (optional)
     * @param  string $account_code (optional)
     * @param  float $amount (optional)
     * @param  float $fc_amount (optional)
     * @param  float $exchange_rate (optional)
     * @param  string $vat_code (optional)
     * @param  bool $is_inclusive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsCreatePosting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transactionsCreatePostingRequest($client_id, $fiscal_year_id, $date = null, $account_code = null, $amount = null, $fc_amount = null, $exchange_rate = null, $vat_code = null, $is_inclusive = null, string $contentType = self::contentTypes['transactionsCreatePosting'][0])
    {

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling transactionsCreatePosting'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling transactionsCreatePosting'
            );
        }









        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/posting';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date,
            'date', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_code,
            'accountCode', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'number', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fc_amount,
            'fcAmount', // param base name
            'number', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exchange_rate,
            'exchangeRate', // param base name
            'number', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $vat_code,
            'vatCode', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_inclusive,
            'isInclusive', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionsDelete
     *
     * delete transaction
     *
     * @param  string $id id (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  bool $delete_doc when not set and transaction has linked document return error (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsDelete'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function transactionsDelete($id, $client_id, $fiscal_year_id, $delete_doc = null, string $contentType = self::contentTypes['transactionsDelete'][0])
    {
        list($response) = $this->transactionsDeleteWithHttpInfo($id, $client_id, $fiscal_year_id, $delete_doc, $contentType);
        return $response;
    }

    /**
     * Operation transactionsDeleteWithHttpInfo
     *
     * delete transaction
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  bool $delete_doc when not set and transaction has linked document return error (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsDelete'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsDeleteWithHttpInfo($id, $client_id, $fiscal_year_id, $delete_doc = null, string $contentType = self::contentTypes['transactionsDelete'][0])
    {
        $request = $this->transactionsDeleteRequest($id, $client_id, $fiscal_year_id, $delete_doc, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transactionsDeleteAsync
     *
     * delete transaction
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  bool $delete_doc when not set and transaction has linked document return error (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsDeleteAsync($id, $client_id, $fiscal_year_id, $delete_doc = null, string $contentType = self::contentTypes['transactionsDelete'][0])
    {
        return $this->transactionsDeleteAsyncWithHttpInfo($id, $client_id, $fiscal_year_id, $delete_doc, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsDeleteAsyncWithHttpInfo
     *
     * delete transaction
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  bool $delete_doc when not set and transaction has linked document return error (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsDeleteAsyncWithHttpInfo($id, $client_id, $fiscal_year_id, $delete_doc = null, string $contentType = self::contentTypes['transactionsDelete'][0])
    {
        $returnType = 'object';
        $request = $this->transactionsDeleteRequest($id, $client_id, $fiscal_year_id, $delete_doc, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsDelete'
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  bool $delete_doc when not set and transaction has linked document return error (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transactionsDeleteRequest($id, $client_id, $fiscal_year_id, $delete_doc = null, string $contentType = self::contentTypes['transactionsDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling transactionsDelete'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling transactionsDelete'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling transactionsDelete'
            );
        }



        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/transactions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $delete_doc,
            'deleteDoc', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionsDeleteDocument
     *
     * delete document
     *
     * @param  string $id id (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsDeleteDocument'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function transactionsDeleteDocument($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsDeleteDocument'][0])
    {
        list($response) = $this->transactionsDeleteDocumentWithHttpInfo($id, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation transactionsDeleteDocumentWithHttpInfo
     *
     * delete document
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsDeleteDocument'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsDeleteDocumentWithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsDeleteDocument'][0])
    {
        $request = $this->transactionsDeleteDocumentRequest($id, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transactionsDeleteDocumentAsync
     *
     * delete document
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsDeleteDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsDeleteDocumentAsync($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsDeleteDocument'][0])
    {
        return $this->transactionsDeleteDocumentAsyncWithHttpInfo($id, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsDeleteDocumentAsyncWithHttpInfo
     *
     * delete document
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsDeleteDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsDeleteDocumentAsyncWithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsDeleteDocument'][0])
    {
        $returnType = 'object';
        $request = $this->transactionsDeleteDocumentRequest($id, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsDeleteDocument'
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsDeleteDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transactionsDeleteDocumentRequest($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsDeleteDocument'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling transactionsDeleteDocument'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling transactionsDeleteDocument'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling transactionsDeleteDocument'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/transactions/{id}/document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionsDownloadDocument
     *
     * download document
     *
     * @param  string $id id (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsDownloadDocument'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function transactionsDownloadDocument($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsDownloadDocument'][0])
    {
        list($response) = $this->transactionsDownloadDocumentWithHttpInfo($id, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation transactionsDownloadDocumentWithHttpInfo
     *
     * download document
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsDownloadDocument'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsDownloadDocumentWithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsDownloadDocument'][0])
    {
        $request = $this->transactionsDownloadDocumentRequest($id, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transactionsDownloadDocumentAsync
     *
     * download document
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsDownloadDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsDownloadDocumentAsync($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsDownloadDocument'][0])
    {
        return $this->transactionsDownloadDocumentAsyncWithHttpInfo($id, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsDownloadDocumentAsyncWithHttpInfo
     *
     * download document
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsDownloadDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsDownloadDocumentAsyncWithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsDownloadDocument'][0])
    {
        $returnType = 'object';
        $request = $this->transactionsDownloadDocumentRequest($id, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsDownloadDocument'
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsDownloadDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transactionsDownloadDocumentRequest($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsDownloadDocument'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling transactionsDownloadDocument'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling transactionsDownloadDocument'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling transactionsDownloadDocument'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/transactions/{id}/document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionsGet
     *
     * get transaction by id
     *
     * @param  string $id id (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGet'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Transaction
     */
    public function transactionsGet($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsGet'][0])
    {
        list($response) = $this->transactionsGetWithHttpInfo($id, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation transactionsGetWithHttpInfo
     *
     * get transaction by id
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGet'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Transaction, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsGetWithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsGet'][0])
    {
        $request = $this->transactionsGetRequest($id, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Transaction' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Transaction' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Transaction', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Transaction';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Transaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transactionsGetAsync
     *
     * get transaction by id
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsGetAsync($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsGet'][0])
    {
        return $this->transactionsGetAsyncWithHttpInfo($id, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsGetAsyncWithHttpInfo
     *
     * get transaction by id
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsGetAsyncWithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsGet'][0])
    {
        $returnType = '\Topal\Client\Model\Transaction';
        $request = $this->transactionsGetRequest($id, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsGet'
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transactionsGetRequest($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling transactionsGet'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling transactionsGet'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling transactionsGet'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/transactions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionsGetByDocNum
     *
     * get transaction by docNum
     *
     * @param  int $doc_num doc_num (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGetByDocNum'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Transaction
     */
    public function transactionsGetByDocNum($doc_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsGetByDocNum'][0])
    {
        list($response) = $this->transactionsGetByDocNumWithHttpInfo($doc_num, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation transactionsGetByDocNumWithHttpInfo
     *
     * get transaction by docNum
     *
     * @param  int $doc_num (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGetByDocNum'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Transaction, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsGetByDocNumWithHttpInfo($doc_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsGetByDocNum'][0])
    {
        $request = $this->transactionsGetByDocNumRequest($doc_num, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Transaction' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Transaction' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Transaction', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Transaction';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Transaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transactionsGetByDocNumAsync
     *
     * get transaction by docNum
     *
     * @param  int $doc_num (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGetByDocNum'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsGetByDocNumAsync($doc_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsGetByDocNum'][0])
    {
        return $this->transactionsGetByDocNumAsyncWithHttpInfo($doc_num, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsGetByDocNumAsyncWithHttpInfo
     *
     * get transaction by docNum
     *
     * @param  int $doc_num (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGetByDocNum'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsGetByDocNumAsyncWithHttpInfo($doc_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsGetByDocNum'][0])
    {
        $returnType = '\Topal\Client\Model\Transaction';
        $request = $this->transactionsGetByDocNumRequest($doc_num, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsGetByDocNum'
     *
     * @param  int $doc_num (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGetByDocNum'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transactionsGetByDocNumRequest($doc_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsGetByDocNum'][0])
    {

        // verify the required parameter 'doc_num' is set
        if ($doc_num === null || (is_array($doc_num) && count($doc_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $doc_num when calling transactionsGetByDocNum'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling transactionsGetByDocNum'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling transactionsGetByDocNum'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/transactions/bydocnum/{docNum}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($doc_num !== null) {
            $resourcePath = str_replace(
                '{' . 'docNum' . '}',
                ObjectSerializer::toPathValue($doc_num),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionsGetPendingDocuments
     *
     * get not procssed documents from dms
     *
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGetPendingDocuments'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Document[]
     */
    public function transactionsGetPendingDocuments($client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsGetPendingDocuments'][0])
    {
        list($response) = $this->transactionsGetPendingDocumentsWithHttpInfo($client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation transactionsGetPendingDocumentsWithHttpInfo
     *
     * get not procssed documents from dms
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGetPendingDocuments'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Document[], HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsGetPendingDocumentsWithHttpInfo($client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsGetPendingDocuments'][0])
    {
        $request = $this->transactionsGetPendingDocumentsRequest($client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Document[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Document[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Document[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Document[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Document[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transactionsGetPendingDocumentsAsync
     *
     * get not procssed documents from dms
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGetPendingDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsGetPendingDocumentsAsync($client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsGetPendingDocuments'][0])
    {
        return $this->transactionsGetPendingDocumentsAsyncWithHttpInfo($client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsGetPendingDocumentsAsyncWithHttpInfo
     *
     * get not procssed documents from dms
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGetPendingDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsGetPendingDocumentsAsyncWithHttpInfo($client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsGetPendingDocuments'][0])
    {
        $returnType = '\Topal\Client\Model\Document[]';
        $request = $this->transactionsGetPendingDocumentsRequest($client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsGetPendingDocuments'
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGetPendingDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transactionsGetPendingDocumentsRequest($client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsGetPendingDocuments'][0])
    {

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling transactionsGetPendingDocuments'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling transactionsGetPendingDocuments'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/transactions/documents/pending';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionsGetVatPosting
     *
     * create posting with calculated vat amounts
     *
     * @param  string $vat_code vat_code (required)
     * @param  float $gross_amount gross_amount (required)
     * @param  float $gross_fc_amount gross_fc_amount (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  bool $is_inclusive is_inclusive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGetVatPosting'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Posting
     */
    public function transactionsGetVatPosting($vat_code, $gross_amount, $gross_fc_amount, $client_id, $fiscal_year_id, $is_inclusive = null, string $contentType = self::contentTypes['transactionsGetVatPosting'][0])
    {
        list($response) = $this->transactionsGetVatPostingWithHttpInfo($vat_code, $gross_amount, $gross_fc_amount, $client_id, $fiscal_year_id, $is_inclusive, $contentType);
        return $response;
    }

    /**
     * Operation transactionsGetVatPostingWithHttpInfo
     *
     * create posting with calculated vat amounts
     *
     * @param  string $vat_code (required)
     * @param  float $gross_amount (required)
     * @param  float $gross_fc_amount (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  bool $is_inclusive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGetVatPosting'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Posting, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsGetVatPostingWithHttpInfo($vat_code, $gross_amount, $gross_fc_amount, $client_id, $fiscal_year_id, $is_inclusive = null, string $contentType = self::contentTypes['transactionsGetVatPosting'][0])
    {
        $request = $this->transactionsGetVatPostingRequest($vat_code, $gross_amount, $gross_fc_amount, $client_id, $fiscal_year_id, $is_inclusive, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Posting' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Posting' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Posting', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Posting';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Posting',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transactionsGetVatPostingAsync
     *
     * create posting with calculated vat amounts
     *
     * @param  string $vat_code (required)
     * @param  float $gross_amount (required)
     * @param  float $gross_fc_amount (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  bool $is_inclusive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGetVatPosting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsGetVatPostingAsync($vat_code, $gross_amount, $gross_fc_amount, $client_id, $fiscal_year_id, $is_inclusive = null, string $contentType = self::contentTypes['transactionsGetVatPosting'][0])
    {
        return $this->transactionsGetVatPostingAsyncWithHttpInfo($vat_code, $gross_amount, $gross_fc_amount, $client_id, $fiscal_year_id, $is_inclusive, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsGetVatPostingAsyncWithHttpInfo
     *
     * create posting with calculated vat amounts
     *
     * @param  string $vat_code (required)
     * @param  float $gross_amount (required)
     * @param  float $gross_fc_amount (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  bool $is_inclusive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGetVatPosting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsGetVatPostingAsyncWithHttpInfo($vat_code, $gross_amount, $gross_fc_amount, $client_id, $fiscal_year_id, $is_inclusive = null, string $contentType = self::contentTypes['transactionsGetVatPosting'][0])
    {
        $returnType = '\Topal\Client\Model\Posting';
        $request = $this->transactionsGetVatPostingRequest($vat_code, $gross_amount, $gross_fc_amount, $client_id, $fiscal_year_id, $is_inclusive, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsGetVatPosting'
     *
     * @param  string $vat_code (required)
     * @param  float $gross_amount (required)
     * @param  float $gross_fc_amount (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  bool $is_inclusive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGetVatPosting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transactionsGetVatPostingRequest($vat_code, $gross_amount, $gross_fc_amount, $client_id, $fiscal_year_id, $is_inclusive = null, string $contentType = self::contentTypes['transactionsGetVatPosting'][0])
    {

        // verify the required parameter 'vat_code' is set
        if ($vat_code === null || (is_array($vat_code) && count($vat_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vat_code when calling transactionsGetVatPosting'
            );
        }

        // verify the required parameter 'gross_amount' is set
        if ($gross_amount === null || (is_array($gross_amount) && count($gross_amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gross_amount when calling transactionsGetVatPosting'
            );
        }

        // verify the required parameter 'gross_fc_amount' is set
        if ($gross_fc_amount === null || (is_array($gross_fc_amount) && count($gross_fc_amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gross_fc_amount when calling transactionsGetVatPosting'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling transactionsGetVatPosting'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling transactionsGetVatPosting'
            );
        }



        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/vatPosting';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $vat_code,
            'vatCode', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $gross_amount,
            'grossAmount', // param base name
            'number', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $gross_fc_amount,
            'grossFcAmount', // param base name
            'number', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_inclusive,
            'isInclusive', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionsGet_0
     *
     * get all transactions within fiscal year
     *
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGet_0'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Transaction[]
     */
    public function transactionsGet_0($client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsGet_0'][0])
    {
        list($response) = $this->transactionsGet_0WithHttpInfo($client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation transactionsGet_0WithHttpInfo
     *
     * get all transactions within fiscal year
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGet_0'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Transaction[], HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsGet_0WithHttpInfo($client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsGet_0'][0])
    {
        $request = $this->transactionsGet_0Request($client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Transaction[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Transaction[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Transaction[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Transaction[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Transaction[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transactionsGet_0Async
     *
     * get all transactions within fiscal year
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGet_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsGet_0Async($client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsGet_0'][0])
    {
        return $this->transactionsGet_0AsyncWithHttpInfo($client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsGet_0AsyncWithHttpInfo
     *
     * get all transactions within fiscal year
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGet_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsGet_0AsyncWithHttpInfo($client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsGet_0'][0])
    {
        $returnType = '\Topal\Client\Model\Transaction[]';
        $request = $this->transactionsGet_0Request($client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsGet_0'
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGet_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transactionsGet_0Request($client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsGet_0'][0])
    {

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling transactionsGet_0'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling transactionsGet_0'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionsLinkDocument
     *
     * link document
     *
     * @param  string $id id (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsLinkDocument'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function transactionsLinkDocument($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsLinkDocument'][0])
    {
        list($response) = $this->transactionsLinkDocumentWithHttpInfo($id, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation transactionsLinkDocumentWithHttpInfo
     *
     * link document
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsLinkDocument'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsLinkDocumentWithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsLinkDocument'][0])
    {
        $request = $this->transactionsLinkDocumentRequest($id, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transactionsLinkDocumentAsync
     *
     * link document
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsLinkDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsLinkDocumentAsync($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsLinkDocument'][0])
    {
        return $this->transactionsLinkDocumentAsyncWithHttpInfo($id, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsLinkDocumentAsyncWithHttpInfo
     *
     * link document
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsLinkDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsLinkDocumentAsyncWithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsLinkDocument'][0])
    {
        $returnType = 'object';
        $request = $this->transactionsLinkDocumentRequest($id, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsLinkDocument'
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsLinkDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transactionsLinkDocumentRequest($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsLinkDocument'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling transactionsLinkDocument'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling transactionsLinkDocument'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling transactionsLinkDocument'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/transactions/{id}/document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionsNew
     *
     * creates new transaction of given type
     *
     * @param  int $transaction_type transaction_type (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsNew'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Transaction
     */
    public function transactionsNew($transaction_type, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsNew'][0])
    {
        list($response) = $this->transactionsNewWithHttpInfo($transaction_type, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation transactionsNewWithHttpInfo
     *
     * creates new transaction of given type
     *
     * @param  int $transaction_type (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsNew'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Transaction, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsNewWithHttpInfo($transaction_type, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsNew'][0])
    {
        $request = $this->transactionsNewRequest($transaction_type, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Transaction' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Transaction' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Transaction', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Transaction';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Transaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transactionsNewAsync
     *
     * creates new transaction of given type
     *
     * @param  int $transaction_type (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsNew'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsNewAsync($transaction_type, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsNew'][0])
    {
        return $this->transactionsNewAsyncWithHttpInfo($transaction_type, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsNewAsyncWithHttpInfo
     *
     * creates new transaction of given type
     *
     * @param  int $transaction_type (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsNew'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsNewAsyncWithHttpInfo($transaction_type, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsNew'][0])
    {
        $returnType = '\Topal\Client\Model\Transaction';
        $request = $this->transactionsNewRequest($transaction_type, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsNew'
     *
     * @param  int $transaction_type (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsNew'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transactionsNewRequest($transaction_type, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsNew'][0])
    {

        // verify the required parameter 'transaction_type' is set
        if ($transaction_type === null || (is_array($transaction_type) && count($transaction_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_type when calling transactionsNew'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling transactionsNew'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling transactionsNew'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/transactions/new/{transactionType}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($transaction_type !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionType' . '}',
                ObjectSerializer::toPathValue($transaction_type),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionsPost
     *
     * saves transaction
     *
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  \Topal\Client\Model\Transaction $transaction transaction (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsPost'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Transaction
     */
    public function transactionsPost($client_id, $fiscal_year_id, $transaction, string $contentType = self::contentTypes['transactionsPost'][0])
    {
        list($response) = $this->transactionsPostWithHttpInfo($client_id, $fiscal_year_id, $transaction, $contentType);
        return $response;
    }

    /**
     * Operation transactionsPostWithHttpInfo
     *
     * saves transaction
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  \Topal\Client\Model\Transaction $transaction (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsPost'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Transaction, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsPostWithHttpInfo($client_id, $fiscal_year_id, $transaction, string $contentType = self::contentTypes['transactionsPost'][0])
    {
        $request = $this->transactionsPostRequest($client_id, $fiscal_year_id, $transaction, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Transaction' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Transaction' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Transaction', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Transaction';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Transaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transactionsPostAsync
     *
     * saves transaction
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  \Topal\Client\Model\Transaction $transaction (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsPostAsync($client_id, $fiscal_year_id, $transaction, string $contentType = self::contentTypes['transactionsPost'][0])
    {
        return $this->transactionsPostAsyncWithHttpInfo($client_id, $fiscal_year_id, $transaction, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsPostAsyncWithHttpInfo
     *
     * saves transaction
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  \Topal\Client\Model\Transaction $transaction (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsPostAsyncWithHttpInfo($client_id, $fiscal_year_id, $transaction, string $contentType = self::contentTypes['transactionsPost'][0])
    {
        $returnType = '\Topal\Client\Model\Transaction';
        $request = $this->transactionsPostRequest($client_id, $fiscal_year_id, $transaction, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsPost'
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  \Topal\Client\Model\Transaction $transaction (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transactionsPostRequest($client_id, $fiscal_year_id, $transaction, string $contentType = self::contentTypes['transactionsPost'][0])
    {

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling transactionsPost'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling transactionsPost'
            );
        }

        // verify the required parameter 'transaction' is set
        if ($transaction === null || (is_array($transaction) && count($transaction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction when calling transactionsPost'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($transaction)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($transaction));
            } else {
                $httpBody = $transaction;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionsUpload
     *
     * save  document to DMS as unrecognized transaction
     *
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsUpload'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function transactionsUpload($client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsUpload'][0])
    {
        list($response) = $this->transactionsUploadWithHttpInfo($client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation transactionsUploadWithHttpInfo
     *
     * save  document to DMS as unrecognized transaction
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsUpload'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsUploadWithHttpInfo($client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsUpload'][0])
    {
        $request = $this->transactionsUploadRequest($client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transactionsUploadAsync
     *
     * save  document to DMS as unrecognized transaction
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsUpload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsUploadAsync($client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsUpload'][0])
    {
        return $this->transactionsUploadAsyncWithHttpInfo($client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsUploadAsyncWithHttpInfo
     *
     * save  document to DMS as unrecognized transaction
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsUpload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsUploadAsyncWithHttpInfo($client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsUpload'][0])
    {
        $returnType = 'object';
        $request = $this->transactionsUploadRequest($client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsUpload'
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsUpload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transactionsUploadRequest($client_id, $fiscal_year_id, string $contentType = self::contentTypes['transactionsUpload'][0])
    {

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling transactionsUpload'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling transactionsUpload'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/transactions/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
