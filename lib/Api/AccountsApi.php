<?php
/**
 * AccountsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Topal REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Topal\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Topal\Client\ApiException;
use Topal\Client\Configuration;
use Topal\Client\HeaderSelector;
use Topal\Client\ObjectSerializer;

/**
 * AccountsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AccountsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'accountsGet' => [
            'application/json',
        ],
        'accountsGetByCode' => [
            'application/json',
        ],
        'accountsGetStatement' => [
            'application/json',
        ],
        'accountsGetStatementDataView' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'accountsGetSummary' => [
            'application/json',
        ],
        'accountsGet_0' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountsGet
     *
     * Gets list of accounts
     *
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGet'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Account[]
     */
    public function accountsGet($client_id, $fiscal_year_id, string $contentType = self::contentTypes['accountsGet'][0])
    {
        list($response) = $this->accountsGetWithHttpInfo($client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation accountsGetWithHttpInfo
     *
     * Gets list of accounts
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGet'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Account[], HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsGetWithHttpInfo($client_id, $fiscal_year_id, string $contentType = self::contentTypes['accountsGet'][0])
    {
        $request = $this->accountsGetRequest($client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Account[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Account[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Account[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Account[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Account[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsGetAsync
     *
     * Gets list of accounts
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetAsync($client_id, $fiscal_year_id, string $contentType = self::contentTypes['accountsGet'][0])
    {
        return $this->accountsGetAsyncWithHttpInfo($client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsGetAsyncWithHttpInfo
     *
     * Gets list of accounts
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetAsyncWithHttpInfo($client_id, $fiscal_year_id, string $contentType = self::contentTypes['accountsGet'][0])
    {
        $returnType = '\Topal\Client\Model\Account[]';
        $request = $this->accountsGetRequest($client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsGet'
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountsGetRequest($client_id, $fiscal_year_id, string $contentType = self::contentTypes['accountsGet'][0])
    {

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling accountsGet'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling accountsGet'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsGetByCode
     *
     * Gets account by code
     *
     * @param  string $code code (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGetByCode'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Account
     */
    public function accountsGetByCode($code, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['accountsGetByCode'][0])
    {
        list($response) = $this->accountsGetByCodeWithHttpInfo($code, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation accountsGetByCodeWithHttpInfo
     *
     * Gets account by code
     *
     * @param  string $code (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGetByCode'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Account, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsGetByCodeWithHttpInfo($code, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['accountsGetByCode'][0])
    {
        $request = $this->accountsGetByCodeRequest($code, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Account' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Account' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Account', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Account';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Account',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsGetByCodeAsync
     *
     * Gets account by code
     *
     * @param  string $code (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGetByCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetByCodeAsync($code, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['accountsGetByCode'][0])
    {
        return $this->accountsGetByCodeAsyncWithHttpInfo($code, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsGetByCodeAsyncWithHttpInfo
     *
     * Gets account by code
     *
     * @param  string $code (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGetByCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetByCodeAsyncWithHttpInfo($code, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['accountsGetByCode'][0])
    {
        $returnType = '\Topal\Client\Model\Account';
        $request = $this->accountsGetByCodeRequest($code, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsGetByCode'
     *
     * @param  string $code (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGetByCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountsGetByCodeRequest($code, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['accountsGetByCode'][0])
    {

        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling accountsGetByCode'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling accountsGetByCode'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling accountsGetByCode'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/accounts/bycode/{code}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                '{' . 'code' . '}',
                ObjectSerializer::toPathValue($code),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsGetStatement
     *
     * get account statement
     *
     * @param  int $id id (required)
     * @param  \DateTime $date_from date_from (required)
     * @param  \DateTime $date_until date_until (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  bool $select_contra_postings select_contra_postings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGetStatement'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\BalancePosting[]
     */
    public function accountsGetStatement($id, $date_from, $date_until, $client_id, $fiscal_year_id, $select_contra_postings = null, string $contentType = self::contentTypes['accountsGetStatement'][0])
    {
        list($response) = $this->accountsGetStatementWithHttpInfo($id, $date_from, $date_until, $client_id, $fiscal_year_id, $select_contra_postings, $contentType);
        return $response;
    }

    /**
     * Operation accountsGetStatementWithHttpInfo
     *
     * get account statement
     *
     * @param  int $id (required)
     * @param  \DateTime $date_from (required)
     * @param  \DateTime $date_until (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  bool $select_contra_postings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGetStatement'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\BalancePosting[], HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsGetStatementWithHttpInfo($id, $date_from, $date_until, $client_id, $fiscal_year_id, $select_contra_postings = null, string $contentType = self::contentTypes['accountsGetStatement'][0])
    {
        $request = $this->accountsGetStatementRequest($id, $date_from, $date_until, $client_id, $fiscal_year_id, $select_contra_postings, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\BalancePosting[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\BalancePosting[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\BalancePosting[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\BalancePosting[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\BalancePosting[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsGetStatementAsync
     *
     * get account statement
     *
     * @param  int $id (required)
     * @param  \DateTime $date_from (required)
     * @param  \DateTime $date_until (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  bool $select_contra_postings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGetStatement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetStatementAsync($id, $date_from, $date_until, $client_id, $fiscal_year_id, $select_contra_postings = null, string $contentType = self::contentTypes['accountsGetStatement'][0])
    {
        return $this->accountsGetStatementAsyncWithHttpInfo($id, $date_from, $date_until, $client_id, $fiscal_year_id, $select_contra_postings, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsGetStatementAsyncWithHttpInfo
     *
     * get account statement
     *
     * @param  int $id (required)
     * @param  \DateTime $date_from (required)
     * @param  \DateTime $date_until (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  bool $select_contra_postings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGetStatement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetStatementAsyncWithHttpInfo($id, $date_from, $date_until, $client_id, $fiscal_year_id, $select_contra_postings = null, string $contentType = self::contentTypes['accountsGetStatement'][0])
    {
        $returnType = '\Topal\Client\Model\BalancePosting[]';
        $request = $this->accountsGetStatementRequest($id, $date_from, $date_until, $client_id, $fiscal_year_id, $select_contra_postings, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsGetStatement'
     *
     * @param  int $id (required)
     * @param  \DateTime $date_from (required)
     * @param  \DateTime $date_until (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  bool $select_contra_postings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGetStatement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountsGetStatementRequest($id, $date_from, $date_until, $client_id, $fiscal_year_id, $select_contra_postings = null, string $contentType = self::contentTypes['accountsGetStatement'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountsGetStatement'
            );
        }

        // verify the required parameter 'date_from' is set
        if ($date_from === null || (is_array($date_from) && count($date_from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_from when calling accountsGetStatement'
            );
        }

        // verify the required parameter 'date_until' is set
        if ($date_until === null || (is_array($date_until) && count($date_until) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_until when calling accountsGetStatement'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling accountsGetStatement'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling accountsGetStatement'
            );
        }



        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/accounts/{id}/statement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_from,
            'dateFrom', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_until,
            'dateUntil', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select_contra_postings,
            'selectContraPostings', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsGetStatementDataView
     *
     * get account statement with filtering, sorting and pagination.
     *
     * @param  int $id id (required)
     * @param  \DateTime $date_from date_from (required)
     * @param  \DateTime $date_until date_until (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  \Topal\Client\Model\DataViewBalancePosting $data_view data_view (required)
     * @param  bool $select_contra_postings select_contra_postings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGetStatementDataView'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\DataViewBalancePosting
     */
    public function accountsGetStatementDataView($id, $date_from, $date_until, $client_id, $fiscal_year_id, $data_view, $select_contra_postings = null, string $contentType = self::contentTypes['accountsGetStatementDataView'][0])
    {
        list($response) = $this->accountsGetStatementDataViewWithHttpInfo($id, $date_from, $date_until, $client_id, $fiscal_year_id, $data_view, $select_contra_postings, $contentType);
        return $response;
    }

    /**
     * Operation accountsGetStatementDataViewWithHttpInfo
     *
     * get account statement with filtering, sorting and pagination.
     *
     * @param  int $id (required)
     * @param  \DateTime $date_from (required)
     * @param  \DateTime $date_until (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  \Topal\Client\Model\DataViewBalancePosting $data_view (required)
     * @param  bool $select_contra_postings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGetStatementDataView'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\DataViewBalancePosting, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsGetStatementDataViewWithHttpInfo($id, $date_from, $date_until, $client_id, $fiscal_year_id, $data_view, $select_contra_postings = null, string $contentType = self::contentTypes['accountsGetStatementDataView'][0])
    {
        $request = $this->accountsGetStatementDataViewRequest($id, $date_from, $date_until, $client_id, $fiscal_year_id, $data_view, $select_contra_postings, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\DataViewBalancePosting' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\DataViewBalancePosting' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\DataViewBalancePosting', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\DataViewBalancePosting';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\DataViewBalancePosting',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsGetStatementDataViewAsync
     *
     * get account statement with filtering, sorting and pagination.
     *
     * @param  int $id (required)
     * @param  \DateTime $date_from (required)
     * @param  \DateTime $date_until (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  \Topal\Client\Model\DataViewBalancePosting $data_view (required)
     * @param  bool $select_contra_postings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGetStatementDataView'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetStatementDataViewAsync($id, $date_from, $date_until, $client_id, $fiscal_year_id, $data_view, $select_contra_postings = null, string $contentType = self::contentTypes['accountsGetStatementDataView'][0])
    {
        return $this->accountsGetStatementDataViewAsyncWithHttpInfo($id, $date_from, $date_until, $client_id, $fiscal_year_id, $data_view, $select_contra_postings, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsGetStatementDataViewAsyncWithHttpInfo
     *
     * get account statement with filtering, sorting and pagination.
     *
     * @param  int $id (required)
     * @param  \DateTime $date_from (required)
     * @param  \DateTime $date_until (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  \Topal\Client\Model\DataViewBalancePosting $data_view (required)
     * @param  bool $select_contra_postings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGetStatementDataView'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetStatementDataViewAsyncWithHttpInfo($id, $date_from, $date_until, $client_id, $fiscal_year_id, $data_view, $select_contra_postings = null, string $contentType = self::contentTypes['accountsGetStatementDataView'][0])
    {
        $returnType = '\Topal\Client\Model\DataViewBalancePosting';
        $request = $this->accountsGetStatementDataViewRequest($id, $date_from, $date_until, $client_id, $fiscal_year_id, $data_view, $select_contra_postings, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsGetStatementDataView'
     *
     * @param  int $id (required)
     * @param  \DateTime $date_from (required)
     * @param  \DateTime $date_until (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  \Topal\Client\Model\DataViewBalancePosting $data_view (required)
     * @param  bool $select_contra_postings (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGetStatementDataView'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountsGetStatementDataViewRequest($id, $date_from, $date_until, $client_id, $fiscal_year_id, $data_view, $select_contra_postings = null, string $contentType = self::contentTypes['accountsGetStatementDataView'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountsGetStatementDataView'
            );
        }

        // verify the required parameter 'date_from' is set
        if ($date_from === null || (is_array($date_from) && count($date_from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_from when calling accountsGetStatementDataView'
            );
        }

        // verify the required parameter 'date_until' is set
        if ($date_until === null || (is_array($date_until) && count($date_until) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_until when calling accountsGetStatementDataView'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling accountsGetStatementDataView'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling accountsGetStatementDataView'
            );
        }

        // verify the required parameter 'data_view' is set
        if ($data_view === null || (is_array($data_view) && count($data_view) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_view when calling accountsGetStatementDataView'
            );
        }



        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/accounts/{id}/statement/dataview';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_from,
            'dateFrom', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_until,
            'dateUntil', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select_contra_postings,
            'selectContraPostings', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data_view)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($data_view));
            } else {
                $httpBody = $data_view;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsGetSummary
     *
     * get account summary
     *
     * @param  int $id id (required)
     * @param  \DateTime $date_from date_from (required)
     * @param  \DateTime $date_until date_until (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGetSummary'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\AccountSummary
     */
    public function accountsGetSummary($id, $date_from, $date_until, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['accountsGetSummary'][0])
    {
        list($response) = $this->accountsGetSummaryWithHttpInfo($id, $date_from, $date_until, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation accountsGetSummaryWithHttpInfo
     *
     * get account summary
     *
     * @param  int $id (required)
     * @param  \DateTime $date_from (required)
     * @param  \DateTime $date_until (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGetSummary'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\AccountSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsGetSummaryWithHttpInfo($id, $date_from, $date_until, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['accountsGetSummary'][0])
    {
        $request = $this->accountsGetSummaryRequest($id, $date_from, $date_until, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\AccountSummary' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\AccountSummary' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\AccountSummary', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\AccountSummary';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\AccountSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsGetSummaryAsync
     *
     * get account summary
     *
     * @param  int $id (required)
     * @param  \DateTime $date_from (required)
     * @param  \DateTime $date_until (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGetSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetSummaryAsync($id, $date_from, $date_until, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['accountsGetSummary'][0])
    {
        return $this->accountsGetSummaryAsyncWithHttpInfo($id, $date_from, $date_until, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsGetSummaryAsyncWithHttpInfo
     *
     * get account summary
     *
     * @param  int $id (required)
     * @param  \DateTime $date_from (required)
     * @param  \DateTime $date_until (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGetSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGetSummaryAsyncWithHttpInfo($id, $date_from, $date_until, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['accountsGetSummary'][0])
    {
        $returnType = '\Topal\Client\Model\AccountSummary';
        $request = $this->accountsGetSummaryRequest($id, $date_from, $date_until, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsGetSummary'
     *
     * @param  int $id (required)
     * @param  \DateTime $date_from (required)
     * @param  \DateTime $date_until (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGetSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountsGetSummaryRequest($id, $date_from, $date_until, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['accountsGetSummary'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountsGetSummary'
            );
        }

        // verify the required parameter 'date_from' is set
        if ($date_from === null || (is_array($date_from) && count($date_from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_from when calling accountsGetSummary'
            );
        }

        // verify the required parameter 'date_until' is set
        if ($date_until === null || (is_array($date_until) && count($date_until) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_until when calling accountsGetSummary'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling accountsGetSummary'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling accountsGetSummary'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/accounts/{id}/summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_from,
            'dateFrom', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_until,
            'dateUntil', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsGet_0
     *
     * Gets account by id
     *
     * @param  int $id id (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGet_0'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Account
     */
    public function accountsGet_0($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['accountsGet_0'][0])
    {
        list($response) = $this->accountsGet_0WithHttpInfo($id, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation accountsGet_0WithHttpInfo
     *
     * Gets account by id
     *
     * @param  int $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGet_0'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Account, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsGet_0WithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['accountsGet_0'][0])
    {
        $request = $this->accountsGet_0Request($id, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Account' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Account' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Account', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Account';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Account',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsGet_0Async
     *
     * Gets account by id
     *
     * @param  int $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGet_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGet_0Async($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['accountsGet_0'][0])
    {
        return $this->accountsGet_0AsyncWithHttpInfo($id, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsGet_0AsyncWithHttpInfo
     *
     * Gets account by id
     *
     * @param  int $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGet_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsGet_0AsyncWithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['accountsGet_0'][0])
    {
        $returnType = '\Topal\Client\Model\Account';
        $request = $this->accountsGet_0Request($id, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsGet_0'
     *
     * @param  int $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['accountsGet_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountsGet_0Request($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['accountsGet_0'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountsGet_0'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling accountsGet_0'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling accountsGet_0'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/accounts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
