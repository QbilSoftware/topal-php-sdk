<?php
/**
 * PayablesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Topal REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Topal\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Topal\Client\ApiException;
use Topal\Client\Configuration;
use Topal\Client\HeaderSelector;
use Topal\Client\ObjectSerializer;

/**
 * PayablesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PayablesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'payablesDelete' => [
            'application/json',
        ],
        'payablesDeleteDocument' => [
            'application/json',
        ],
        'payablesDeleteManualPayment' => [
            'application/json',
        ],
        'payablesDownloadDocument' => [
            'application/json',
        ],
        'payablesGet' => [
            'application/json',
        ],
        'payablesGetAll' => [
            'application/json',
        ],
        'payablesGetAllPartyInvoices' => [
            'application/json',
        ],
        'payablesGetByFreeInvoiceNum' => [
            'application/json',
        ],
        'payablesGetByFreeInvoicesNum' => [
            'application/json',
        ],
        'payablesGetByInvoiceNum' => [
            'application/json',
        ],
        'payablesGetInvoicesByPeriod' => [
            'application/json',
        ],
        'payablesGetManualPayment' => [
            'application/json',
        ],
        'payablesGetManualPayments' => [
            'application/json',
        ],
        'payablesGetOpen' => [
            'application/json',
        ],
        'payablesGetOpenInvoicesByPeriod' => [
            'application/json',
        ],
        'payablesGetOpenPartyInvoices' => [
            'application/json',
        ],
        'payablesGetPartyInvoiceByFreeInvoiceNum' => [
            'application/json',
        ],
        'payablesGetPartyInvoices' => [
            'application/json',
        ],
        'payablesGetPartyInvoicesByFreeInvoiceNum' => [
            'application/json',
        ],
        'payablesGetPendingDocuments' => [
            'application/json',
        ],
        'payablesGet_0' => [
            'application/json',
        ],
        'payablesLinkDocument' => [
            'application/json',
        ],
        'payablesNew' => [
            'application/json',
        ],
        'payablesPayInvoice' => [
            'application/json',
        ],
        'payablesPost' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'payablesPostFromQrBill' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'payablesPostManualPayment' => [
            'application/json',
            'text/json',
            'application/xml',
            'text/xml',
            'application/x-www-form-urlencoded',
        ],
        'payablesUpload' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation payablesDelete
     *
     * Delete payables invoice by id
     *
     * @param  string $id id (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesDelete'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function payablesDelete($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesDelete'][0])
    {
        list($response) = $this->payablesDeleteWithHttpInfo($id, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation payablesDeleteWithHttpInfo
     *
     * Delete payables invoice by id
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesDelete'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesDeleteWithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesDelete'][0])
    {
        $request = $this->payablesDeleteRequest($id, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesDeleteAsync
     *
     * Delete payables invoice by id
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesDeleteAsync($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesDelete'][0])
    {
        return $this->payablesDeleteAsyncWithHttpInfo($id, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesDeleteAsyncWithHttpInfo
     *
     * Delete payables invoice by id
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesDeleteAsyncWithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesDelete'][0])
    {
        $returnType = 'object';
        $request = $this->payablesDeleteRequest($id, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesDelete'
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesDeleteRequest($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling payablesDelete'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesDelete'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesDelete'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/invoices/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesDeleteDocument
     *
     * delete document
     *
     * @param  string $id id (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesDeleteDocument'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function payablesDeleteDocument($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesDeleteDocument'][0])
    {
        list($response) = $this->payablesDeleteDocumentWithHttpInfo($id, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation payablesDeleteDocumentWithHttpInfo
     *
     * delete document
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesDeleteDocument'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesDeleteDocumentWithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesDeleteDocument'][0])
    {
        $request = $this->payablesDeleteDocumentRequest($id, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesDeleteDocumentAsync
     *
     * delete document
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesDeleteDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesDeleteDocumentAsync($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesDeleteDocument'][0])
    {
        return $this->payablesDeleteDocumentAsyncWithHttpInfo($id, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesDeleteDocumentAsyncWithHttpInfo
     *
     * delete document
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesDeleteDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesDeleteDocumentAsyncWithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesDeleteDocument'][0])
    {
        $returnType = 'object';
        $request = $this->payablesDeleteDocumentRequest($id, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesDeleteDocument'
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesDeleteDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesDeleteDocumentRequest($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesDeleteDocument'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling payablesDeleteDocument'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesDeleteDocument'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesDeleteDocument'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/{id}/document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesDeleteManualPayment
     *
     * delete manualPayment by id
     *
     * @param  string $id id (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesDeleteManualPayment'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function payablesDeleteManualPayment($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesDeleteManualPayment'][0])
    {
        list($response) = $this->payablesDeleteManualPaymentWithHttpInfo($id, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation payablesDeleteManualPaymentWithHttpInfo
     *
     * delete manualPayment by id
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesDeleteManualPayment'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesDeleteManualPaymentWithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesDeleteManualPayment'][0])
    {
        $request = $this->payablesDeleteManualPaymentRequest($id, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesDeleteManualPaymentAsync
     *
     * delete manualPayment by id
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesDeleteManualPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesDeleteManualPaymentAsync($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesDeleteManualPayment'][0])
    {
        return $this->payablesDeleteManualPaymentAsyncWithHttpInfo($id, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesDeleteManualPaymentAsyncWithHttpInfo
     *
     * delete manualPayment by id
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesDeleteManualPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesDeleteManualPaymentAsyncWithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesDeleteManualPayment'][0])
    {
        $returnType = 'object';
        $request = $this->payablesDeleteManualPaymentRequest($id, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesDeleteManualPayment'
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesDeleteManualPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesDeleteManualPaymentRequest($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesDeleteManualPayment'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling payablesDeleteManualPayment'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesDeleteManualPayment'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesDeleteManualPayment'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/manualpayments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesDownloadDocument
     *
     * download document
     *
     * @param  string $id id (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesDownloadDocument'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function payablesDownloadDocument($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesDownloadDocument'][0])
    {
        list($response) = $this->payablesDownloadDocumentWithHttpInfo($id, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation payablesDownloadDocumentWithHttpInfo
     *
     * download document
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesDownloadDocument'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesDownloadDocumentWithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesDownloadDocument'][0])
    {
        $request = $this->payablesDownloadDocumentRequest($id, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesDownloadDocumentAsync
     *
     * download document
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesDownloadDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesDownloadDocumentAsync($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesDownloadDocument'][0])
    {
        return $this->payablesDownloadDocumentAsyncWithHttpInfo($id, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesDownloadDocumentAsyncWithHttpInfo
     *
     * download document
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesDownloadDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesDownloadDocumentAsyncWithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesDownloadDocument'][0])
    {
        $returnType = 'object';
        $request = $this->payablesDownloadDocumentRequest($id, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesDownloadDocument'
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesDownloadDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesDownloadDocumentRequest($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesDownloadDocument'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling payablesDownloadDocument'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesDownloadDocument'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesDownloadDocument'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/{id}/document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesGet
     *
     * Retreives list of payables invoices
     *
     * @param  bool $only_open only_open (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGet'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Invoice[]
     */
    public function payablesGet($only_open, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGet'][0])
    {
        list($response) = $this->payablesGetWithHttpInfo($only_open, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation payablesGetWithHttpInfo
     *
     * Retreives list of payables invoices
     *
     * @param  bool $only_open (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGet'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Invoice[], HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesGetWithHttpInfo($only_open, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGet'][0])
    {
        $request = $this->payablesGetRequest($only_open, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Invoice[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Invoice[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Invoice[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Invoice[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Invoice[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesGetAsync
     *
     * Retreives list of payables invoices
     *
     * @param  bool $only_open (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetAsync($only_open, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGet'][0])
    {
        return $this->payablesGetAsyncWithHttpInfo($only_open, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesGetAsyncWithHttpInfo
     *
     * Retreives list of payables invoices
     *
     * @param  bool $only_open (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetAsyncWithHttpInfo($only_open, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGet'][0])
    {
        $returnType = '\Topal\Client\Model\Invoice[]';
        $request = $this->payablesGetRequest($only_open, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesGet'
     *
     * @param  bool $only_open (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesGetRequest($only_open, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGet'][0])
    {

        // verify the required parameter 'only_open' is set
        if ($only_open === null || (is_array($only_open) && count($only_open) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $only_open when calling payablesGet'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesGet'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesGet'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $only_open,
            'onlyOpen', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesGetAll
     *
     * Retreives list of payables invoices
     *
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetAll'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Invoice[]
     */
    public function payablesGetAll($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetAll'][0])
    {
        list($response) = $this->payablesGetAllWithHttpInfo($client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation payablesGetAllWithHttpInfo
     *
     * Retreives list of payables invoices
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetAll'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Invoice[], HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesGetAllWithHttpInfo($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetAll'][0])
    {
        $request = $this->payablesGetAllRequest($client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Invoice[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Invoice[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Invoice[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Invoice[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Invoice[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesGetAllAsync
     *
     * Retreives list of payables invoices
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetAllAsync($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetAll'][0])
    {
        return $this->payablesGetAllAsyncWithHttpInfo($client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesGetAllAsyncWithHttpInfo
     *
     * Retreives list of payables invoices
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetAllAsyncWithHttpInfo($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetAll'][0])
    {
        $returnType = '\Topal\Client\Model\Invoice[]';
        $request = $this->payablesGetAllRequest($client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesGetAll'
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesGetAllRequest($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetAll'][0])
    {

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesGetAll'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesGetAll'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/invoices/all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesGetAllPartyInvoices
     *
     * Retreives list of party all payables invoices
     *
     * @param  int $id id (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetAllPartyInvoices'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Invoice[]
     */
    public function payablesGetAllPartyInvoices($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetAllPartyInvoices'][0])
    {
        list($response) = $this->payablesGetAllPartyInvoicesWithHttpInfo($id, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation payablesGetAllPartyInvoicesWithHttpInfo
     *
     * Retreives list of party all payables invoices
     *
     * @param  int $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetAllPartyInvoices'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Invoice[], HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesGetAllPartyInvoicesWithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetAllPartyInvoices'][0])
    {
        $request = $this->payablesGetAllPartyInvoicesRequest($id, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Invoice[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Invoice[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Invoice[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Invoice[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Invoice[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesGetAllPartyInvoicesAsync
     *
     * Retreives list of party all payables invoices
     *
     * @param  int $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetAllPartyInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetAllPartyInvoicesAsync($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetAllPartyInvoices'][0])
    {
        return $this->payablesGetAllPartyInvoicesAsyncWithHttpInfo($id, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesGetAllPartyInvoicesAsyncWithHttpInfo
     *
     * Retreives list of party all payables invoices
     *
     * @param  int $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetAllPartyInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetAllPartyInvoicesAsyncWithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetAllPartyInvoices'][0])
    {
        $returnType = '\Topal\Client\Model\Invoice[]';
        $request = $this->payablesGetAllPartyInvoicesRequest($id, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesGetAllPartyInvoices'
     *
     * @param  int $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetAllPartyInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesGetAllPartyInvoicesRequest($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetAllPartyInvoices'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling payablesGetAllPartyInvoices'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesGetAllPartyInvoices'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesGetAllPartyInvoices'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/parties/{id}/invoices/all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesGetByFreeInvoiceNum
     *
     * Get payables invoice by freeInvoiceNum, return error if there is more than one invoice with this number
     *
     * @param  string $free_invoice_num free_invoice_num (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetByFreeInvoiceNum'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Invoice
     */
    public function payablesGetByFreeInvoiceNum($free_invoice_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetByFreeInvoiceNum'][0])
    {
        list($response) = $this->payablesGetByFreeInvoiceNumWithHttpInfo($free_invoice_num, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation payablesGetByFreeInvoiceNumWithHttpInfo
     *
     * Get payables invoice by freeInvoiceNum, return error if there is more than one invoice with this number
     *
     * @param  string $free_invoice_num (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetByFreeInvoiceNum'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Invoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesGetByFreeInvoiceNumWithHttpInfo($free_invoice_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetByFreeInvoiceNum'][0])
    {
        $request = $this->payablesGetByFreeInvoiceNumRequest($free_invoice_num, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Invoice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Invoice' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Invoice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Invoice';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Invoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesGetByFreeInvoiceNumAsync
     *
     * Get payables invoice by freeInvoiceNum, return error if there is more than one invoice with this number
     *
     * @param  string $free_invoice_num (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetByFreeInvoiceNum'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetByFreeInvoiceNumAsync($free_invoice_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetByFreeInvoiceNum'][0])
    {
        return $this->payablesGetByFreeInvoiceNumAsyncWithHttpInfo($free_invoice_num, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesGetByFreeInvoiceNumAsyncWithHttpInfo
     *
     * Get payables invoice by freeInvoiceNum, return error if there is more than one invoice with this number
     *
     * @param  string $free_invoice_num (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetByFreeInvoiceNum'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetByFreeInvoiceNumAsyncWithHttpInfo($free_invoice_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetByFreeInvoiceNum'][0])
    {
        $returnType = '\Topal\Client\Model\Invoice';
        $request = $this->payablesGetByFreeInvoiceNumRequest($free_invoice_num, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesGetByFreeInvoiceNum'
     *
     * @param  string $free_invoice_num (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetByFreeInvoiceNum'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesGetByFreeInvoiceNumRequest($free_invoice_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetByFreeInvoiceNum'][0])
    {

        // verify the required parameter 'free_invoice_num' is set
        if ($free_invoice_num === null || (is_array($free_invoice_num) && count($free_invoice_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $free_invoice_num when calling payablesGetByFreeInvoiceNum'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesGetByFreeInvoiceNum'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesGetByFreeInvoiceNum'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/invoices/byfreeinvoicenum/{freeInvoiceNum}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($free_invoice_num !== null) {
            $resourcePath = str_replace(
                '{' . 'freeInvoiceNum' . '}',
                ObjectSerializer::toPathValue($free_invoice_num),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesGetByFreeInvoicesNum
     *
     * Get list of payables invoices by freeInvoiceNum
     *
     * @param  string $free_invoice_num free_invoice_num (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetByFreeInvoicesNum'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Invoice[]
     */
    public function payablesGetByFreeInvoicesNum($free_invoice_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetByFreeInvoicesNum'][0])
    {
        list($response) = $this->payablesGetByFreeInvoicesNumWithHttpInfo($free_invoice_num, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation payablesGetByFreeInvoicesNumWithHttpInfo
     *
     * Get list of payables invoices by freeInvoiceNum
     *
     * @param  string $free_invoice_num (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetByFreeInvoicesNum'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Invoice[], HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesGetByFreeInvoicesNumWithHttpInfo($free_invoice_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetByFreeInvoicesNum'][0])
    {
        $request = $this->payablesGetByFreeInvoicesNumRequest($free_invoice_num, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Invoice[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Invoice[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Invoice[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Invoice[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Invoice[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesGetByFreeInvoicesNumAsync
     *
     * Get list of payables invoices by freeInvoiceNum
     *
     * @param  string $free_invoice_num (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetByFreeInvoicesNum'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetByFreeInvoicesNumAsync($free_invoice_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetByFreeInvoicesNum'][0])
    {
        return $this->payablesGetByFreeInvoicesNumAsyncWithHttpInfo($free_invoice_num, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesGetByFreeInvoicesNumAsyncWithHttpInfo
     *
     * Get list of payables invoices by freeInvoiceNum
     *
     * @param  string $free_invoice_num (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetByFreeInvoicesNum'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetByFreeInvoicesNumAsyncWithHttpInfo($free_invoice_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetByFreeInvoicesNum'][0])
    {
        $returnType = '\Topal\Client\Model\Invoice[]';
        $request = $this->payablesGetByFreeInvoicesNumRequest($free_invoice_num, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesGetByFreeInvoicesNum'
     *
     * @param  string $free_invoice_num (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetByFreeInvoicesNum'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesGetByFreeInvoicesNumRequest($free_invoice_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetByFreeInvoicesNum'][0])
    {

        // verify the required parameter 'free_invoice_num' is set
        if ($free_invoice_num === null || (is_array($free_invoice_num) && count($free_invoice_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $free_invoice_num when calling payablesGetByFreeInvoicesNum'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesGetByFreeInvoicesNum'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesGetByFreeInvoicesNum'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/invoices/byfreeinvoicenum/{freeInvoiceNum}/all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($free_invoice_num !== null) {
            $resourcePath = str_replace(
                '{' . 'freeInvoiceNum' . '}',
                ObjectSerializer::toPathValue($free_invoice_num),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesGetByInvoiceNum
     *
     * Get payables invoice by invoiceNum
     *
     * @param  int $invoice_num invoice_num (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetByInvoiceNum'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Invoice
     */
    public function payablesGetByInvoiceNum($invoice_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetByInvoiceNum'][0])
    {
        list($response) = $this->payablesGetByInvoiceNumWithHttpInfo($invoice_num, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation payablesGetByInvoiceNumWithHttpInfo
     *
     * Get payables invoice by invoiceNum
     *
     * @param  int $invoice_num (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetByInvoiceNum'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Invoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesGetByInvoiceNumWithHttpInfo($invoice_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetByInvoiceNum'][0])
    {
        $request = $this->payablesGetByInvoiceNumRequest($invoice_num, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Invoice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Invoice' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Invoice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Invoice';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Invoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesGetByInvoiceNumAsync
     *
     * Get payables invoice by invoiceNum
     *
     * @param  int $invoice_num (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetByInvoiceNum'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetByInvoiceNumAsync($invoice_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetByInvoiceNum'][0])
    {
        return $this->payablesGetByInvoiceNumAsyncWithHttpInfo($invoice_num, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesGetByInvoiceNumAsyncWithHttpInfo
     *
     * Get payables invoice by invoiceNum
     *
     * @param  int $invoice_num (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetByInvoiceNum'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetByInvoiceNumAsyncWithHttpInfo($invoice_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetByInvoiceNum'][0])
    {
        $returnType = '\Topal\Client\Model\Invoice';
        $request = $this->payablesGetByInvoiceNumRequest($invoice_num, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesGetByInvoiceNum'
     *
     * @param  int $invoice_num (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetByInvoiceNum'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesGetByInvoiceNumRequest($invoice_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetByInvoiceNum'][0])
    {

        // verify the required parameter 'invoice_num' is set
        if ($invoice_num === null || (is_array($invoice_num) && count($invoice_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_num when calling payablesGetByInvoiceNum'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesGetByInvoiceNum'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesGetByInvoiceNum'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/invoices/byinvoicenum/{invoiceNum}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($invoice_num !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceNum' . '}',
                ObjectSerializer::toPathValue($invoice_num),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesGetInvoicesByPeriod
     *
     * Retreives list of payables invoices by period
     *
     * @param  \DateTime $date_from date_from (required)
     * @param  \DateTime $date_until date_until (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetInvoicesByPeriod'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Invoice[]
     */
    public function payablesGetInvoicesByPeriod($date_from, $date_until, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetInvoicesByPeriod'][0])
    {
        list($response) = $this->payablesGetInvoicesByPeriodWithHttpInfo($date_from, $date_until, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation payablesGetInvoicesByPeriodWithHttpInfo
     *
     * Retreives list of payables invoices by period
     *
     * @param  \DateTime $date_from (required)
     * @param  \DateTime $date_until (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetInvoicesByPeriod'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Invoice[], HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesGetInvoicesByPeriodWithHttpInfo($date_from, $date_until, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetInvoicesByPeriod'][0])
    {
        $request = $this->payablesGetInvoicesByPeriodRequest($date_from, $date_until, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Invoice[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Invoice[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Invoice[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Invoice[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Invoice[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesGetInvoicesByPeriodAsync
     *
     * Retreives list of payables invoices by period
     *
     * @param  \DateTime $date_from (required)
     * @param  \DateTime $date_until (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetInvoicesByPeriod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetInvoicesByPeriodAsync($date_from, $date_until, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetInvoicesByPeriod'][0])
    {
        return $this->payablesGetInvoicesByPeriodAsyncWithHttpInfo($date_from, $date_until, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesGetInvoicesByPeriodAsyncWithHttpInfo
     *
     * Retreives list of payables invoices by period
     *
     * @param  \DateTime $date_from (required)
     * @param  \DateTime $date_until (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetInvoicesByPeriod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetInvoicesByPeriodAsyncWithHttpInfo($date_from, $date_until, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetInvoicesByPeriod'][0])
    {
        $returnType = '\Topal\Client\Model\Invoice[]';
        $request = $this->payablesGetInvoicesByPeriodRequest($date_from, $date_until, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesGetInvoicesByPeriod'
     *
     * @param  \DateTime $date_from (required)
     * @param  \DateTime $date_until (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetInvoicesByPeriod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesGetInvoicesByPeriodRequest($date_from, $date_until, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetInvoicesByPeriod'][0])
    {

        // verify the required parameter 'date_from' is set
        if ($date_from === null || (is_array($date_from) && count($date_from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_from when calling payablesGetInvoicesByPeriod'
            );
        }

        // verify the required parameter 'date_until' is set
        if ($date_until === null || (is_array($date_until) && count($date_until) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_until when calling payablesGetInvoicesByPeriod'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesGetInvoicesByPeriod'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesGetInvoicesByPeriod'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/invoices/byperiod';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_from,
            'dateFrom', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_until,
            'dateUntil', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesGetManualPayment
     *
     * get manualPayment by id
     *
     * @param  string $id id (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetManualPayment'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Payment
     */
    public function payablesGetManualPayment($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetManualPayment'][0])
    {
        list($response) = $this->payablesGetManualPaymentWithHttpInfo($id, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation payablesGetManualPaymentWithHttpInfo
     *
     * get manualPayment by id
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetManualPayment'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Payment, HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesGetManualPaymentWithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetManualPayment'][0])
    {
        $request = $this->payablesGetManualPaymentRequest($id, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Payment' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesGetManualPaymentAsync
     *
     * get manualPayment by id
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetManualPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetManualPaymentAsync($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetManualPayment'][0])
    {
        return $this->payablesGetManualPaymentAsyncWithHttpInfo($id, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesGetManualPaymentAsyncWithHttpInfo
     *
     * get manualPayment by id
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetManualPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetManualPaymentAsyncWithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetManualPayment'][0])
    {
        $returnType = '\Topal\Client\Model\Payment';
        $request = $this->payablesGetManualPaymentRequest($id, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesGetManualPayment'
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetManualPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesGetManualPaymentRequest($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetManualPayment'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling payablesGetManualPayment'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesGetManualPayment'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesGetManualPayment'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/manualpayments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesGetManualPayments
     *
     * Retreives list of Manual Payments
     *
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetManualPayments'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Payment[]
     */
    public function payablesGetManualPayments($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetManualPayments'][0])
    {
        list($response) = $this->payablesGetManualPaymentsWithHttpInfo($client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation payablesGetManualPaymentsWithHttpInfo
     *
     * Retreives list of Manual Payments
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetManualPayments'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Payment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesGetManualPaymentsWithHttpInfo($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetManualPayments'][0])
    {
        $request = $this->payablesGetManualPaymentsRequest($client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Payment[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Payment[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Payment[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Payment[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Payment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesGetManualPaymentsAsync
     *
     * Retreives list of Manual Payments
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetManualPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetManualPaymentsAsync($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetManualPayments'][0])
    {
        return $this->payablesGetManualPaymentsAsyncWithHttpInfo($client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesGetManualPaymentsAsyncWithHttpInfo
     *
     * Retreives list of Manual Payments
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetManualPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetManualPaymentsAsyncWithHttpInfo($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetManualPayments'][0])
    {
        $returnType = '\Topal\Client\Model\Payment[]';
        $request = $this->payablesGetManualPaymentsRequest($client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesGetManualPayments'
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetManualPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesGetManualPaymentsRequest($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetManualPayments'][0])
    {

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesGetManualPayments'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesGetManualPayments'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/manualpayments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesGetOpen
     *
     * Retreives list of payables invoices
     *
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetOpen'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Invoice[]
     */
    public function payablesGetOpen($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetOpen'][0])
    {
        list($response) = $this->payablesGetOpenWithHttpInfo($client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation payablesGetOpenWithHttpInfo
     *
     * Retreives list of payables invoices
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetOpen'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Invoice[], HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesGetOpenWithHttpInfo($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetOpen'][0])
    {
        $request = $this->payablesGetOpenRequest($client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Invoice[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Invoice[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Invoice[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Invoice[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Invoice[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesGetOpenAsync
     *
     * Retreives list of payables invoices
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetOpen'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetOpenAsync($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetOpen'][0])
    {
        return $this->payablesGetOpenAsyncWithHttpInfo($client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesGetOpenAsyncWithHttpInfo
     *
     * Retreives list of payables invoices
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetOpen'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetOpenAsyncWithHttpInfo($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetOpen'][0])
    {
        $returnType = '\Topal\Client\Model\Invoice[]';
        $request = $this->payablesGetOpenRequest($client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesGetOpen'
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetOpen'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesGetOpenRequest($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetOpen'][0])
    {

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesGetOpen'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesGetOpen'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/invoices/open';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesGetOpenInvoicesByPeriod
     *
     * Retreives list of payables invoices by period
     *
     * @param  \DateTime $date_from date_from (required)
     * @param  \DateTime $date_until date_until (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetOpenInvoicesByPeriod'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Invoice[]
     */
    public function payablesGetOpenInvoicesByPeriod($date_from, $date_until, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetOpenInvoicesByPeriod'][0])
    {
        list($response) = $this->payablesGetOpenInvoicesByPeriodWithHttpInfo($date_from, $date_until, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation payablesGetOpenInvoicesByPeriodWithHttpInfo
     *
     * Retreives list of payables invoices by period
     *
     * @param  \DateTime $date_from (required)
     * @param  \DateTime $date_until (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetOpenInvoicesByPeriod'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Invoice[], HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesGetOpenInvoicesByPeriodWithHttpInfo($date_from, $date_until, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetOpenInvoicesByPeriod'][0])
    {
        $request = $this->payablesGetOpenInvoicesByPeriodRequest($date_from, $date_until, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Invoice[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Invoice[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Invoice[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Invoice[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Invoice[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesGetOpenInvoicesByPeriodAsync
     *
     * Retreives list of payables invoices by period
     *
     * @param  \DateTime $date_from (required)
     * @param  \DateTime $date_until (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetOpenInvoicesByPeriod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetOpenInvoicesByPeriodAsync($date_from, $date_until, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetOpenInvoicesByPeriod'][0])
    {
        return $this->payablesGetOpenInvoicesByPeriodAsyncWithHttpInfo($date_from, $date_until, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesGetOpenInvoicesByPeriodAsyncWithHttpInfo
     *
     * Retreives list of payables invoices by period
     *
     * @param  \DateTime $date_from (required)
     * @param  \DateTime $date_until (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetOpenInvoicesByPeriod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetOpenInvoicesByPeriodAsyncWithHttpInfo($date_from, $date_until, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetOpenInvoicesByPeriod'][0])
    {
        $returnType = '\Topal\Client\Model\Invoice[]';
        $request = $this->payablesGetOpenInvoicesByPeriodRequest($date_from, $date_until, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesGetOpenInvoicesByPeriod'
     *
     * @param  \DateTime $date_from (required)
     * @param  \DateTime $date_until (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetOpenInvoicesByPeriod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesGetOpenInvoicesByPeriodRequest($date_from, $date_until, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetOpenInvoicesByPeriod'][0])
    {

        // verify the required parameter 'date_from' is set
        if ($date_from === null || (is_array($date_from) && count($date_from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_from when calling payablesGetOpenInvoicesByPeriod'
            );
        }

        // verify the required parameter 'date_until' is set
        if ($date_until === null || (is_array($date_until) && count($date_until) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_until when calling payablesGetOpenInvoicesByPeriod'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesGetOpenInvoicesByPeriod'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesGetOpenInvoicesByPeriod'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/invoices/open/byperiod';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_from,
            'dateFrom', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_until,
            'dateUntil', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesGetOpenPartyInvoices
     *
     * Retreives list of party open payables invoices
     *
     * @param  int $id id (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetOpenPartyInvoices'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Invoice[]
     */
    public function payablesGetOpenPartyInvoices($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetOpenPartyInvoices'][0])
    {
        list($response) = $this->payablesGetOpenPartyInvoicesWithHttpInfo($id, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation payablesGetOpenPartyInvoicesWithHttpInfo
     *
     * Retreives list of party open payables invoices
     *
     * @param  int $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetOpenPartyInvoices'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Invoice[], HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesGetOpenPartyInvoicesWithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetOpenPartyInvoices'][0])
    {
        $request = $this->payablesGetOpenPartyInvoicesRequest($id, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Invoice[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Invoice[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Invoice[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Invoice[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Invoice[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesGetOpenPartyInvoicesAsync
     *
     * Retreives list of party open payables invoices
     *
     * @param  int $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetOpenPartyInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetOpenPartyInvoicesAsync($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetOpenPartyInvoices'][0])
    {
        return $this->payablesGetOpenPartyInvoicesAsyncWithHttpInfo($id, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesGetOpenPartyInvoicesAsyncWithHttpInfo
     *
     * Retreives list of party open payables invoices
     *
     * @param  int $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetOpenPartyInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetOpenPartyInvoicesAsyncWithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetOpenPartyInvoices'][0])
    {
        $returnType = '\Topal\Client\Model\Invoice[]';
        $request = $this->payablesGetOpenPartyInvoicesRequest($id, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesGetOpenPartyInvoices'
     *
     * @param  int $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetOpenPartyInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesGetOpenPartyInvoicesRequest($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetOpenPartyInvoices'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling payablesGetOpenPartyInvoices'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesGetOpenPartyInvoices'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesGetOpenPartyInvoices'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/parties/{id}/invoices/open';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesGetPartyInvoiceByFreeInvoiceNum
     *
     * Get payables invoice by party ID and freeInvoiceNum, return error if there is more than one invoice with this number
     *
     * @param  int $party_id party_id (required)
     * @param  string $free_invoice_num free_invoice_num (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetPartyInvoiceByFreeInvoiceNum'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Invoice
     */
    public function payablesGetPartyInvoiceByFreeInvoiceNum($party_id, $free_invoice_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetPartyInvoiceByFreeInvoiceNum'][0])
    {
        list($response) = $this->payablesGetPartyInvoiceByFreeInvoiceNumWithHttpInfo($party_id, $free_invoice_num, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation payablesGetPartyInvoiceByFreeInvoiceNumWithHttpInfo
     *
     * Get payables invoice by party ID and freeInvoiceNum, return error if there is more than one invoice with this number
     *
     * @param  int $party_id (required)
     * @param  string $free_invoice_num (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetPartyInvoiceByFreeInvoiceNum'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Invoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesGetPartyInvoiceByFreeInvoiceNumWithHttpInfo($party_id, $free_invoice_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetPartyInvoiceByFreeInvoiceNum'][0])
    {
        $request = $this->payablesGetPartyInvoiceByFreeInvoiceNumRequest($party_id, $free_invoice_num, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Invoice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Invoice' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Invoice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Invoice';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Invoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesGetPartyInvoiceByFreeInvoiceNumAsync
     *
     * Get payables invoice by party ID and freeInvoiceNum, return error if there is more than one invoice with this number
     *
     * @param  int $party_id (required)
     * @param  string $free_invoice_num (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetPartyInvoiceByFreeInvoiceNum'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetPartyInvoiceByFreeInvoiceNumAsync($party_id, $free_invoice_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetPartyInvoiceByFreeInvoiceNum'][0])
    {
        return $this->payablesGetPartyInvoiceByFreeInvoiceNumAsyncWithHttpInfo($party_id, $free_invoice_num, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesGetPartyInvoiceByFreeInvoiceNumAsyncWithHttpInfo
     *
     * Get payables invoice by party ID and freeInvoiceNum, return error if there is more than one invoice with this number
     *
     * @param  int $party_id (required)
     * @param  string $free_invoice_num (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetPartyInvoiceByFreeInvoiceNum'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetPartyInvoiceByFreeInvoiceNumAsyncWithHttpInfo($party_id, $free_invoice_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetPartyInvoiceByFreeInvoiceNum'][0])
    {
        $returnType = '\Topal\Client\Model\Invoice';
        $request = $this->payablesGetPartyInvoiceByFreeInvoiceNumRequest($party_id, $free_invoice_num, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesGetPartyInvoiceByFreeInvoiceNum'
     *
     * @param  int $party_id (required)
     * @param  string $free_invoice_num (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetPartyInvoiceByFreeInvoiceNum'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesGetPartyInvoiceByFreeInvoiceNumRequest($party_id, $free_invoice_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetPartyInvoiceByFreeInvoiceNum'][0])
    {

        // verify the required parameter 'party_id' is set
        if ($party_id === null || (is_array($party_id) && count($party_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $party_id when calling payablesGetPartyInvoiceByFreeInvoiceNum'
            );
        }

        // verify the required parameter 'free_invoice_num' is set
        if ($free_invoice_num === null || (is_array($free_invoice_num) && count($free_invoice_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $free_invoice_num when calling payablesGetPartyInvoiceByFreeInvoiceNum'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesGetPartyInvoiceByFreeInvoiceNum'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesGetPartyInvoiceByFreeInvoiceNum'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/parties/{partyID}/invoices/byfreeinvoicenum/{freeInvoiceNum}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($party_id !== null) {
            $resourcePath = str_replace(
                '{' . 'partyID' . '}',
                ObjectSerializer::toPathValue($party_id),
                $resourcePath
            );
        }
        // path params
        if ($free_invoice_num !== null) {
            $resourcePath = str_replace(
                '{' . 'freeInvoiceNum' . '}',
                ObjectSerializer::toPathValue($free_invoice_num),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesGetPartyInvoices
     *
     * Retreives list of party payables invoices
     *
     * @param  int $id id (required)
     * @param  bool $only_open only_open (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetPartyInvoices'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Invoice[]
     */
    public function payablesGetPartyInvoices($id, $only_open, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetPartyInvoices'][0])
    {
        list($response) = $this->payablesGetPartyInvoicesWithHttpInfo($id, $only_open, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation payablesGetPartyInvoicesWithHttpInfo
     *
     * Retreives list of party payables invoices
     *
     * @param  int $id (required)
     * @param  bool $only_open (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetPartyInvoices'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Invoice[], HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesGetPartyInvoicesWithHttpInfo($id, $only_open, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetPartyInvoices'][0])
    {
        $request = $this->payablesGetPartyInvoicesRequest($id, $only_open, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Invoice[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Invoice[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Invoice[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Invoice[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Invoice[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesGetPartyInvoicesAsync
     *
     * Retreives list of party payables invoices
     *
     * @param  int $id (required)
     * @param  bool $only_open (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetPartyInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetPartyInvoicesAsync($id, $only_open, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetPartyInvoices'][0])
    {
        return $this->payablesGetPartyInvoicesAsyncWithHttpInfo($id, $only_open, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesGetPartyInvoicesAsyncWithHttpInfo
     *
     * Retreives list of party payables invoices
     *
     * @param  int $id (required)
     * @param  bool $only_open (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetPartyInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetPartyInvoicesAsyncWithHttpInfo($id, $only_open, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetPartyInvoices'][0])
    {
        $returnType = '\Topal\Client\Model\Invoice[]';
        $request = $this->payablesGetPartyInvoicesRequest($id, $only_open, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesGetPartyInvoices'
     *
     * @param  int $id (required)
     * @param  bool $only_open (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetPartyInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesGetPartyInvoicesRequest($id, $only_open, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetPartyInvoices'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling payablesGetPartyInvoices'
            );
        }

        // verify the required parameter 'only_open' is set
        if ($only_open === null || (is_array($only_open) && count($only_open) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $only_open when calling payablesGetPartyInvoices'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesGetPartyInvoices'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesGetPartyInvoices'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/parties/{id}/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $only_open,
            'onlyOpen', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesGetPartyInvoicesByFreeInvoiceNum
     *
     * Get list of payables invoices by partyFID freeInvoiceNum
     *
     * @param  int $party_id party_id (required)
     * @param  string $free_invoice_num free_invoice_num (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetPartyInvoicesByFreeInvoiceNum'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Invoice[]
     */
    public function payablesGetPartyInvoicesByFreeInvoiceNum($party_id, $free_invoice_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetPartyInvoicesByFreeInvoiceNum'][0])
    {
        list($response) = $this->payablesGetPartyInvoicesByFreeInvoiceNumWithHttpInfo($party_id, $free_invoice_num, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation payablesGetPartyInvoicesByFreeInvoiceNumWithHttpInfo
     *
     * Get list of payables invoices by partyFID freeInvoiceNum
     *
     * @param  int $party_id (required)
     * @param  string $free_invoice_num (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetPartyInvoicesByFreeInvoiceNum'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Invoice[], HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesGetPartyInvoicesByFreeInvoiceNumWithHttpInfo($party_id, $free_invoice_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetPartyInvoicesByFreeInvoiceNum'][0])
    {
        $request = $this->payablesGetPartyInvoicesByFreeInvoiceNumRequest($party_id, $free_invoice_num, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Invoice[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Invoice[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Invoice[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Invoice[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Invoice[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesGetPartyInvoicesByFreeInvoiceNumAsync
     *
     * Get list of payables invoices by partyFID freeInvoiceNum
     *
     * @param  int $party_id (required)
     * @param  string $free_invoice_num (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetPartyInvoicesByFreeInvoiceNum'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetPartyInvoicesByFreeInvoiceNumAsync($party_id, $free_invoice_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetPartyInvoicesByFreeInvoiceNum'][0])
    {
        return $this->payablesGetPartyInvoicesByFreeInvoiceNumAsyncWithHttpInfo($party_id, $free_invoice_num, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesGetPartyInvoicesByFreeInvoiceNumAsyncWithHttpInfo
     *
     * Get list of payables invoices by partyFID freeInvoiceNum
     *
     * @param  int $party_id (required)
     * @param  string $free_invoice_num (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetPartyInvoicesByFreeInvoiceNum'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetPartyInvoicesByFreeInvoiceNumAsyncWithHttpInfo($party_id, $free_invoice_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetPartyInvoicesByFreeInvoiceNum'][0])
    {
        $returnType = '\Topal\Client\Model\Invoice[]';
        $request = $this->payablesGetPartyInvoicesByFreeInvoiceNumRequest($party_id, $free_invoice_num, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesGetPartyInvoicesByFreeInvoiceNum'
     *
     * @param  int $party_id (required)
     * @param  string $free_invoice_num (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetPartyInvoicesByFreeInvoiceNum'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesGetPartyInvoicesByFreeInvoiceNumRequest($party_id, $free_invoice_num, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetPartyInvoicesByFreeInvoiceNum'][0])
    {

        // verify the required parameter 'party_id' is set
        if ($party_id === null || (is_array($party_id) && count($party_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $party_id when calling payablesGetPartyInvoicesByFreeInvoiceNum'
            );
        }

        // verify the required parameter 'free_invoice_num' is set
        if ($free_invoice_num === null || (is_array($free_invoice_num) && count($free_invoice_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $free_invoice_num when calling payablesGetPartyInvoicesByFreeInvoiceNum'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesGetPartyInvoicesByFreeInvoiceNum'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesGetPartyInvoicesByFreeInvoiceNum'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/parties/{partyID}/invoices/byfreeinvoicenum/{freeInvoiceNum}/all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($party_id !== null) {
            $resourcePath = str_replace(
                '{' . 'partyID' . '}',
                ObjectSerializer::toPathValue($party_id),
                $resourcePath
            );
        }
        // path params
        if ($free_invoice_num !== null) {
            $resourcePath = str_replace(
                '{' . 'freeInvoiceNum' . '}',
                ObjectSerializer::toPathValue($free_invoice_num),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesGetPendingDocuments
     *
     * get not procssed documents from dms
     *
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetPendingDocuments'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Document[]
     */
    public function payablesGetPendingDocuments($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetPendingDocuments'][0])
    {
        list($response) = $this->payablesGetPendingDocumentsWithHttpInfo($client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation payablesGetPendingDocumentsWithHttpInfo
     *
     * get not procssed documents from dms
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetPendingDocuments'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Document[], HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesGetPendingDocumentsWithHttpInfo($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetPendingDocuments'][0])
    {
        $request = $this->payablesGetPendingDocumentsRequest($client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Document[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Document[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Document[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Document[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Document[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesGetPendingDocumentsAsync
     *
     * get not procssed documents from dms
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetPendingDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetPendingDocumentsAsync($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetPendingDocuments'][0])
    {
        return $this->payablesGetPendingDocumentsAsyncWithHttpInfo($client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesGetPendingDocumentsAsyncWithHttpInfo
     *
     * get not procssed documents from dms
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetPendingDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGetPendingDocumentsAsyncWithHttpInfo($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetPendingDocuments'][0])
    {
        $returnType = '\Topal\Client\Model\Document[]';
        $request = $this->payablesGetPendingDocumentsRequest($client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesGetPendingDocuments'
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGetPendingDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesGetPendingDocumentsRequest($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGetPendingDocuments'][0])
    {

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesGetPendingDocuments'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesGetPendingDocuments'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/documents/pending';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesGet_0
     *
     * Get payables invoice by id
     *
     * @param  string $id id (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGet_0'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Invoice
     */
    public function payablesGet_0($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGet_0'][0])
    {
        list($response) = $this->payablesGet_0WithHttpInfo($id, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation payablesGet_0WithHttpInfo
     *
     * Get payables invoice by id
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGet_0'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Invoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesGet_0WithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGet_0'][0])
    {
        $request = $this->payablesGet_0Request($id, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Invoice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Invoice' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Invoice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Invoice';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Invoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesGet_0Async
     *
     * Get payables invoice by id
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGet_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGet_0Async($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGet_0'][0])
    {
        return $this->payablesGet_0AsyncWithHttpInfo($id, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesGet_0AsyncWithHttpInfo
     *
     * Get payables invoice by id
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGet_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesGet_0AsyncWithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGet_0'][0])
    {
        $returnType = '\Topal\Client\Model\Invoice';
        $request = $this->payablesGet_0Request($id, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesGet_0'
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesGet_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesGet_0Request($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesGet_0'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling payablesGet_0'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesGet_0'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesGet_0'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/invoices/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesLinkDocument
     *
     * link document
     *
     * @param  string $id id (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesLinkDocument'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function payablesLinkDocument($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesLinkDocument'][0])
    {
        list($response) = $this->payablesLinkDocumentWithHttpInfo($id, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation payablesLinkDocumentWithHttpInfo
     *
     * link document
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesLinkDocument'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesLinkDocumentWithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesLinkDocument'][0])
    {
        $request = $this->payablesLinkDocumentRequest($id, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesLinkDocumentAsync
     *
     * link document
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesLinkDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesLinkDocumentAsync($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesLinkDocument'][0])
    {
        return $this->payablesLinkDocumentAsyncWithHttpInfo($id, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesLinkDocumentAsyncWithHttpInfo
     *
     * link document
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesLinkDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesLinkDocumentAsyncWithHttpInfo($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesLinkDocument'][0])
    {
        $returnType = 'object';
        $request = $this->payablesLinkDocumentRequest($id, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesLinkDocument'
     *
     * @param  string $id (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesLinkDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesLinkDocumentRequest($id, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesLinkDocument'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling payablesLinkDocument'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesLinkDocument'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesLinkDocument'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/{id}/document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesNew
     *
     * creates new invoice
     *
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesNew'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Invoice
     */
    public function payablesNew($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesNew'][0])
    {
        list($response) = $this->payablesNewWithHttpInfo($client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation payablesNewWithHttpInfo
     *
     * creates new invoice
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesNew'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Invoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesNewWithHttpInfo($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesNew'][0])
    {
        $request = $this->payablesNewRequest($client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Invoice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Invoice' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Invoice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Invoice';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Invoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesNewAsync
     *
     * creates new invoice
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesNew'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesNewAsync($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesNew'][0])
    {
        return $this->payablesNewAsyncWithHttpInfo($client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesNewAsyncWithHttpInfo
     *
     * creates new invoice
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesNew'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesNewAsyncWithHttpInfo($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesNew'][0])
    {
        $returnType = '\Topal\Client\Model\Invoice';
        $request = $this->payablesNewRequest($client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesNew'
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesNew'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesNewRequest($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesNew'][0])
    {

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesNew'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesNew'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/invoices/new';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesPayInvoice
     *
     * pay invoice by id
     *
     * @param  string $id id (required)
     * @param  \DateTime $date date (required)
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesPayInvoice'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Payment
     */
    public function payablesPayInvoice($id, $date, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesPayInvoice'][0])
    {
        list($response) = $this->payablesPayInvoiceWithHttpInfo($id, $date, $client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation payablesPayInvoiceWithHttpInfo
     *
     * pay invoice by id
     *
     * @param  string $id (required)
     * @param  \DateTime $date (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesPayInvoice'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Payment, HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesPayInvoiceWithHttpInfo($id, $date, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesPayInvoice'][0])
    {
        $request = $this->payablesPayInvoiceRequest($id, $date, $client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Payment' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesPayInvoiceAsync
     *
     * pay invoice by id
     *
     * @param  string $id (required)
     * @param  \DateTime $date (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesPayInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesPayInvoiceAsync($id, $date, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesPayInvoice'][0])
    {
        return $this->payablesPayInvoiceAsyncWithHttpInfo($id, $date, $client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesPayInvoiceAsyncWithHttpInfo
     *
     * pay invoice by id
     *
     * @param  string $id (required)
     * @param  \DateTime $date (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesPayInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesPayInvoiceAsyncWithHttpInfo($id, $date, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesPayInvoice'][0])
    {
        $returnType = '\Topal\Client\Model\Payment';
        $request = $this->payablesPayInvoiceRequest($id, $date, $client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesPayInvoice'
     *
     * @param  string $id (required)
     * @param  \DateTime $date (required)
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesPayInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesPayInvoiceRequest($id, $date, $client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesPayInvoice'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling payablesPayInvoice'
            );
        }

        // verify the required parameter 'date' is set
        if ($date === null || (is_array($date) && count($date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date when calling payablesPayInvoice'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesPayInvoice'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesPayInvoice'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/invoices/{id}/pay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date,
            'date', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesPost
     *
     * Save payables invouce
     *
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  \Topal\Client\Model\Invoice $invoice invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesPost'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Invoice
     */
    public function payablesPost($client_id, $fiscal_year_id, $invoice, string $contentType = self::contentTypes['payablesPost'][0])
    {
        list($response) = $this->payablesPostWithHttpInfo($client_id, $fiscal_year_id, $invoice, $contentType);
        return $response;
    }

    /**
     * Operation payablesPostWithHttpInfo
     *
     * Save payables invouce
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  \Topal\Client\Model\Invoice $invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesPost'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Invoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesPostWithHttpInfo($client_id, $fiscal_year_id, $invoice, string $contentType = self::contentTypes['payablesPost'][0])
    {
        $request = $this->payablesPostRequest($client_id, $fiscal_year_id, $invoice, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Invoice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Invoice' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Invoice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Invoice';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Invoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesPostAsync
     *
     * Save payables invouce
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  \Topal\Client\Model\Invoice $invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesPostAsync($client_id, $fiscal_year_id, $invoice, string $contentType = self::contentTypes['payablesPost'][0])
    {
        return $this->payablesPostAsyncWithHttpInfo($client_id, $fiscal_year_id, $invoice, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesPostAsyncWithHttpInfo
     *
     * Save payables invouce
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  \Topal\Client\Model\Invoice $invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesPostAsyncWithHttpInfo($client_id, $fiscal_year_id, $invoice, string $contentType = self::contentTypes['payablesPost'][0])
    {
        $returnType = '\Topal\Client\Model\Invoice';
        $request = $this->payablesPostRequest($client_id, $fiscal_year_id, $invoice, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesPost'
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  \Topal\Client\Model\Invoice $invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesPostRequest($client_id, $fiscal_year_id, $invoice, string $contentType = self::contentTypes['payablesPost'][0])
    {

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesPost'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesPost'
            );
        }

        // verify the required parameter 'invoice' is set
        if ($invoice === null || (is_array($invoice) && count($invoice) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice when calling payablesPost'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($invoice)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($invoice));
            } else {
                $httpBody = $invoice;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesPostFromQrBill
     *
     * Creates payables invoice out of QrBill
     *
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  \Topal\Client\Model\QrBill $qr_bill qr_bill (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesPostFromQrBill'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Invoice
     */
    public function payablesPostFromQrBill($client_id, $fiscal_year_id, $qr_bill, string $contentType = self::contentTypes['payablesPostFromQrBill'][0])
    {
        list($response) = $this->payablesPostFromQrBillWithHttpInfo($client_id, $fiscal_year_id, $qr_bill, $contentType);
        return $response;
    }

    /**
     * Operation payablesPostFromQrBillWithHttpInfo
     *
     * Creates payables invoice out of QrBill
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  \Topal\Client\Model\QrBill $qr_bill (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesPostFromQrBill'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Invoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesPostFromQrBillWithHttpInfo($client_id, $fiscal_year_id, $qr_bill, string $contentType = self::contentTypes['payablesPostFromQrBill'][0])
    {
        $request = $this->payablesPostFromQrBillRequest($client_id, $fiscal_year_id, $qr_bill, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Invoice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Invoice' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Invoice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Invoice';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Invoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesPostFromQrBillAsync
     *
     * Creates payables invoice out of QrBill
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  \Topal\Client\Model\QrBill $qr_bill (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesPostFromQrBill'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesPostFromQrBillAsync($client_id, $fiscal_year_id, $qr_bill, string $contentType = self::contentTypes['payablesPostFromQrBill'][0])
    {
        return $this->payablesPostFromQrBillAsyncWithHttpInfo($client_id, $fiscal_year_id, $qr_bill, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesPostFromQrBillAsyncWithHttpInfo
     *
     * Creates payables invoice out of QrBill
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  \Topal\Client\Model\QrBill $qr_bill (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesPostFromQrBill'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesPostFromQrBillAsyncWithHttpInfo($client_id, $fiscal_year_id, $qr_bill, string $contentType = self::contentTypes['payablesPostFromQrBill'][0])
    {
        $returnType = '\Topal\Client\Model\Invoice';
        $request = $this->payablesPostFromQrBillRequest($client_id, $fiscal_year_id, $qr_bill, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesPostFromQrBill'
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  \Topal\Client\Model\QrBill $qr_bill (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesPostFromQrBill'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesPostFromQrBillRequest($client_id, $fiscal_year_id, $qr_bill, string $contentType = self::contentTypes['payablesPostFromQrBill'][0])
    {

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesPostFromQrBill'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesPostFromQrBill'
            );
        }

        // verify the required parameter 'qr_bill' is set
        if ($qr_bill === null || (is_array($qr_bill) && count($qr_bill) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $qr_bill when calling payablesPostFromQrBill'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/invoices/qrbill';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($qr_bill)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($qr_bill));
            } else {
                $httpBody = $qr_bill;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesPostManualPayment
     *
     * saves manualPayment
     *
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  \Topal\Client\Model\Payment $payment payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesPostManualPayment'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Topal\Client\Model\Payment
     */
    public function payablesPostManualPayment($client_id, $fiscal_year_id, $payment, string $contentType = self::contentTypes['payablesPostManualPayment'][0])
    {
        list($response) = $this->payablesPostManualPaymentWithHttpInfo($client_id, $fiscal_year_id, $payment, $contentType);
        return $response;
    }

    /**
     * Operation payablesPostManualPaymentWithHttpInfo
     *
     * saves manualPayment
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  \Topal\Client\Model\Payment $payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesPostManualPayment'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Topal\Client\Model\Payment, HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesPostManualPaymentWithHttpInfo($client_id, $fiscal_year_id, $payment, string $contentType = self::contentTypes['payablesPostManualPayment'][0])
    {
        $request = $this->payablesPostManualPaymentRequest($client_id, $fiscal_year_id, $payment, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Topal\Client\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Topal\Client\Model\Payment' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Topal\Client\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Topal\Client\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Topal\Client\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesPostManualPaymentAsync
     *
     * saves manualPayment
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  \Topal\Client\Model\Payment $payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesPostManualPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesPostManualPaymentAsync($client_id, $fiscal_year_id, $payment, string $contentType = self::contentTypes['payablesPostManualPayment'][0])
    {
        return $this->payablesPostManualPaymentAsyncWithHttpInfo($client_id, $fiscal_year_id, $payment, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesPostManualPaymentAsyncWithHttpInfo
     *
     * saves manualPayment
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  \Topal\Client\Model\Payment $payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesPostManualPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesPostManualPaymentAsyncWithHttpInfo($client_id, $fiscal_year_id, $payment, string $contentType = self::contentTypes['payablesPostManualPayment'][0])
    {
        $returnType = '\Topal\Client\Model\Payment';
        $request = $this->payablesPostManualPaymentRequest($client_id, $fiscal_year_id, $payment, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesPostManualPayment'
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  \Topal\Client\Model\Payment $payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesPostManualPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesPostManualPaymentRequest($client_id, $fiscal_year_id, $payment, string $contentType = self::contentTypes['payablesPostManualPayment'][0])
    {

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesPostManualPayment'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesPostManualPayment'
            );
        }

        // verify the required parameter 'payment' is set
        if ($payment === null || (is_array($payment) && count($payment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment when calling payablesPostManualPayment'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/manualpayments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($payment)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($payment));
            } else {
                $httpBody = $payment;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payablesUpload
     *
     * create invoice from qrBill and save document to DMS
     *
     * @param  string $client_id client_id (required)
     * @param  string $fiscal_year_id fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesUpload'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function payablesUpload($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesUpload'][0])
    {
        list($response) = $this->payablesUploadWithHttpInfo($client_id, $fiscal_year_id, $contentType);
        return $response;
    }

    /**
     * Operation payablesUploadWithHttpInfo
     *
     * create invoice from qrBill and save document to DMS
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesUpload'] to see the possible values for this operation
     *
     * @throws \Topal\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function payablesUploadWithHttpInfo($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesUpload'][0])
    {
        $request = $this->payablesUploadRequest($client_id, $fiscal_year_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation payablesUploadAsync
     *
     * create invoice from qrBill and save document to DMS
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesUpload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesUploadAsync($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesUpload'][0])
    {
        return $this->payablesUploadAsyncWithHttpInfo($client_id, $fiscal_year_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payablesUploadAsyncWithHttpInfo
     *
     * create invoice from qrBill and save document to DMS
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesUpload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payablesUploadAsyncWithHttpInfo($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesUpload'][0])
    {
        $returnType = 'object';
        $request = $this->payablesUploadRequest($client_id, $fiscal_year_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payablesUpload'
     *
     * @param  string $client_id (required)
     * @param  string $fiscal_year_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payablesUpload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payablesUploadRequest($client_id, $fiscal_year_id, string $contentType = self::contentTypes['payablesUpload'][0])
    {

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling payablesUpload'
            );
        }

        // verify the required parameter 'fiscal_year_id' is set
        if ($fiscal_year_id === null || (is_array($fiscal_year_id) && count($fiscal_year_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscal_year_id when calling payablesUpload'
            );
        }


        $resourcePath = '/api/v1/clients/{clientId}/fiscalYears/{fiscalYearId}/payables/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clientId' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }
        // path params
        if ($fiscal_year_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalYearId' . '}',
                ObjectSerializer::toPathValue($fiscal_year_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/json', 'application/xml', 'text/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
