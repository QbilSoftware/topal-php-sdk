<?php
/**
 * Client
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Topal REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Topal\Client\Model;

use \ArrayAccess;
use \Topal\Client\ObjectSerializer;

/**
 * Client Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Client implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Client';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'guid' => 'string',
        'fiscal_year_fid' => 'int',
        'currency_fid' => 'int',
        'name' => 'string',
        'code' => 'string',
        'person' => 'string',
        'city' => 'string',
        'street' => 'string',
        'remarks' => 'string',
        'telephone' => 'string',
        'zip' => 'string',
        'vat_number' => 'string',
        'backup_ts' => '\DateTime',
        'last_timestamp' => '\DateTime',
        'is_discount_swiss_rounded' => 'bool',
        'is_kc_swiss_rounded' => 'bool',
        'is_template' => 'bool',
        'is_vat_swiss_rounded' => 'bool',
        'vat_agreed' => 'bool',
        'vat_payment_based' => 'bool',
        'vat_required' => 'bool',
        'vat_simplefied' => 'bool',
        'is_current' => 'bool',
        'is_password_protected' => 'bool',
        'currency_code' => 'string',
        'fiscal_years' => '\OpenAPI\Client\Model\FiscalYear[]',
        'vat_periods' => '\OpenAPI\Client\Model\VATPeriod[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'guid' => 'uuid',
        'fiscal_year_fid' => 'int32',
        'currency_fid' => 'int32',
        'name' => null,
        'code' => null,
        'person' => null,
        'city' => null,
        'street' => null,
        'remarks' => null,
        'telephone' => null,
        'zip' => null,
        'vat_number' => null,
        'backup_ts' => 'date-time',
        'last_timestamp' => 'date-time',
        'is_discount_swiss_rounded' => null,
        'is_kc_swiss_rounded' => null,
        'is_template' => null,
        'is_vat_swiss_rounded' => null,
        'vat_agreed' => null,
        'vat_payment_based' => null,
        'vat_required' => null,
        'vat_simplefied' => null,
        'is_current' => null,
        'is_password_protected' => null,
        'currency_code' => null,
        'fiscal_years' => null,
        'vat_periods' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'guid' => false,
        'fiscal_year_fid' => false,
        'currency_fid' => false,
        'name' => false,
        'code' => false,
        'person' => false,
        'city' => false,
        'street' => false,
        'remarks' => false,
        'telephone' => false,
        'zip' => false,
        'vat_number' => false,
        'backup_ts' => false,
        'last_timestamp' => false,
        'is_discount_swiss_rounded' => false,
        'is_kc_swiss_rounded' => false,
        'is_template' => false,
        'is_vat_swiss_rounded' => false,
        'vat_agreed' => false,
        'vat_payment_based' => false,
        'vat_required' => false,
        'vat_simplefied' => false,
        'is_current' => false,
        'is_password_protected' => false,
        'currency_code' => false,
        'fiscal_years' => false,
        'vat_periods' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'guid' => 'guid',
        'fiscal_year_fid' => 'fiscalYearFID',
        'currency_fid' => 'currencyFID',
        'name' => 'name',
        'code' => 'code',
        'person' => 'person',
        'city' => 'city',
        'street' => 'street',
        'remarks' => 'remarks',
        'telephone' => 'telephone',
        'zip' => 'zip',
        'vat_number' => 'vatNumber',
        'backup_ts' => 'backupTS',
        'last_timestamp' => 'lastTimestamp',
        'is_discount_swiss_rounded' => 'isDiscountSwissRounded',
        'is_kc_swiss_rounded' => 'isKCSwissRounded',
        'is_template' => 'isTemplate',
        'is_vat_swiss_rounded' => 'isVATSwissRounded',
        'vat_agreed' => 'vatAgreed',
        'vat_payment_based' => 'vatPaymentBased',
        'vat_required' => 'vatRequired',
        'vat_simplefied' => 'vatSimplefied',
        'is_current' => 'isCurrent',
        'is_password_protected' => 'isPasswordProtected',
        'currency_code' => 'currencyCode',
        'fiscal_years' => 'fiscalYears',
        'vat_periods' => 'vatPeriods'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'guid' => 'setGuid',
        'fiscal_year_fid' => 'setFiscalYearFid',
        'currency_fid' => 'setCurrencyFid',
        'name' => 'setName',
        'code' => 'setCode',
        'person' => 'setPerson',
        'city' => 'setCity',
        'street' => 'setStreet',
        'remarks' => 'setRemarks',
        'telephone' => 'setTelephone',
        'zip' => 'setZip',
        'vat_number' => 'setVatNumber',
        'backup_ts' => 'setBackupTs',
        'last_timestamp' => 'setLastTimestamp',
        'is_discount_swiss_rounded' => 'setIsDiscountSwissRounded',
        'is_kc_swiss_rounded' => 'setIsKcSwissRounded',
        'is_template' => 'setIsTemplate',
        'is_vat_swiss_rounded' => 'setIsVatSwissRounded',
        'vat_agreed' => 'setVatAgreed',
        'vat_payment_based' => 'setVatPaymentBased',
        'vat_required' => 'setVatRequired',
        'vat_simplefied' => 'setVatSimplefied',
        'is_current' => 'setIsCurrent',
        'is_password_protected' => 'setIsPasswordProtected',
        'currency_code' => 'setCurrencyCode',
        'fiscal_years' => 'setFiscalYears',
        'vat_periods' => 'setVatPeriods'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'guid' => 'getGuid',
        'fiscal_year_fid' => 'getFiscalYearFid',
        'currency_fid' => 'getCurrencyFid',
        'name' => 'getName',
        'code' => 'getCode',
        'person' => 'getPerson',
        'city' => 'getCity',
        'street' => 'getStreet',
        'remarks' => 'getRemarks',
        'telephone' => 'getTelephone',
        'zip' => 'getZip',
        'vat_number' => 'getVatNumber',
        'backup_ts' => 'getBackupTs',
        'last_timestamp' => 'getLastTimestamp',
        'is_discount_swiss_rounded' => 'getIsDiscountSwissRounded',
        'is_kc_swiss_rounded' => 'getIsKcSwissRounded',
        'is_template' => 'getIsTemplate',
        'is_vat_swiss_rounded' => 'getIsVatSwissRounded',
        'vat_agreed' => 'getVatAgreed',
        'vat_payment_based' => 'getVatPaymentBased',
        'vat_required' => 'getVatRequired',
        'vat_simplefied' => 'getVatSimplefied',
        'is_current' => 'getIsCurrent',
        'is_password_protected' => 'getIsPasswordProtected',
        'currency_code' => 'getCurrencyCode',
        'fiscal_years' => 'getFiscalYears',
        'vat_periods' => 'getVatPeriods'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('guid', $data ?? [], null);
        $this->setIfExists('fiscal_year_fid', $data ?? [], null);
        $this->setIfExists('currency_fid', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('person', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('street', $data ?? [], null);
        $this->setIfExists('remarks', $data ?? [], null);
        $this->setIfExists('telephone', $data ?? [], null);
        $this->setIfExists('zip', $data ?? [], null);
        $this->setIfExists('vat_number', $data ?? [], null);
        $this->setIfExists('backup_ts', $data ?? [], null);
        $this->setIfExists('last_timestamp', $data ?? [], null);
        $this->setIfExists('is_discount_swiss_rounded', $data ?? [], null);
        $this->setIfExists('is_kc_swiss_rounded', $data ?? [], null);
        $this->setIfExists('is_template', $data ?? [], null);
        $this->setIfExists('is_vat_swiss_rounded', $data ?? [], null);
        $this->setIfExists('vat_agreed', $data ?? [], null);
        $this->setIfExists('vat_payment_based', $data ?? [], null);
        $this->setIfExists('vat_required', $data ?? [], null);
        $this->setIfExists('vat_simplefied', $data ?? [], null);
        $this->setIfExists('is_current', $data ?? [], null);
        $this->setIfExists('is_password_protected', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('fiscal_years', $data ?? [], null);
        $this->setIfExists('vat_periods', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets guid
     *
     * @return string|null
     */
    public function getGuid()
    {
        return $this->container['guid'];
    }

    /**
     * Sets guid
     *
     * @param string|null $guid guid
     *
     * @return self
     */
    public function setGuid($guid)
    {
        if (is_null($guid)) {
            throw new \InvalidArgumentException('non-nullable guid cannot be null');
        }
        $this->container['guid'] = $guid;

        return $this;
    }

    /**
     * Gets fiscal_year_fid
     *
     * @return int|null
     */
    public function getFiscalYearFid()
    {
        return $this->container['fiscal_year_fid'];
    }

    /**
     * Sets fiscal_year_fid
     *
     * @param int|null $fiscal_year_fid fiscal_year_fid
     *
     * @return self
     */
    public function setFiscalYearFid($fiscal_year_fid)
    {
        if (is_null($fiscal_year_fid)) {
            throw new \InvalidArgumentException('non-nullable fiscal_year_fid cannot be null');
        }
        $this->container['fiscal_year_fid'] = $fiscal_year_fid;

        return $this;
    }

    /**
     * Gets currency_fid
     *
     * @return int|null
     */
    public function getCurrencyFid()
    {
        return $this->container['currency_fid'];
    }

    /**
     * Sets currency_fid
     *
     * @param int|null $currency_fid currency_fid
     *
     * @return self
     */
    public function setCurrencyFid($currency_fid)
    {
        if (is_null($currency_fid)) {
            throw new \InvalidArgumentException('non-nullable currency_fid cannot be null');
        }
        $this->container['currency_fid'] = $currency_fid;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets person
     *
     * @return string|null
     */
    public function getPerson()
    {
        return $this->container['person'];
    }

    /**
     * Sets person
     *
     * @param string|null $person person
     *
     * @return self
     */
    public function setPerson($person)
    {
        if (is_null($person)) {
            throw new \InvalidArgumentException('non-nullable person cannot be null');
        }
        $this->container['person'] = $person;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string|null
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string|null $street street
     *
     * @return self
     */
    public function setStreet($street)
    {
        if (is_null($street)) {
            throw new \InvalidArgumentException('non-nullable street cannot be null');
        }
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets remarks
     *
     * @return string|null
     */
    public function getRemarks()
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks
     *
     * @param string|null $remarks remarks
     *
     * @return self
     */
    public function setRemarks($remarks)
    {
        if (is_null($remarks)) {
            throw new \InvalidArgumentException('non-nullable remarks cannot be null');
        }
        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets telephone
     *
     * @return string|null
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     *
     * @param string|null $telephone telephone
     *
     * @return self
     */
    public function setTelephone($telephone)
    {
        if (is_null($telephone)) {
            throw new \InvalidArgumentException('non-nullable telephone cannot be null');
        }
        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip zip
     *
     * @return self
     */
    public function setZip($zip)
    {
        if (is_null($zip)) {
            throw new \InvalidArgumentException('non-nullable zip cannot be null');
        }
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets vat_number
     *
     * @return string|null
     */
    public function getVatNumber()
    {
        return $this->container['vat_number'];
    }

    /**
     * Sets vat_number
     *
     * @param string|null $vat_number vat_number
     *
     * @return self
     */
    public function setVatNumber($vat_number)
    {
        if (is_null($vat_number)) {
            throw new \InvalidArgumentException('non-nullable vat_number cannot be null');
        }
        $this->container['vat_number'] = $vat_number;

        return $this;
    }

    /**
     * Gets backup_ts
     *
     * @return \DateTime|null
     */
    public function getBackupTs()
    {
        return $this->container['backup_ts'];
    }

    /**
     * Sets backup_ts
     *
     * @param \DateTime|null $backup_ts backup_ts
     *
     * @return self
     */
    public function setBackupTs($backup_ts)
    {
        if (is_null($backup_ts)) {
            throw new \InvalidArgumentException('non-nullable backup_ts cannot be null');
        }
        $this->container['backup_ts'] = $backup_ts;

        return $this;
    }

    /**
     * Gets last_timestamp
     *
     * @return \DateTime|null
     */
    public function getLastTimestamp()
    {
        return $this->container['last_timestamp'];
    }

    /**
     * Sets last_timestamp
     *
     * @param \DateTime|null $last_timestamp last_timestamp
     *
     * @return self
     */
    public function setLastTimestamp($last_timestamp)
    {
        if (is_null($last_timestamp)) {
            throw new \InvalidArgumentException('non-nullable last_timestamp cannot be null');
        }
        $this->container['last_timestamp'] = $last_timestamp;

        return $this;
    }

    /**
     * Gets is_discount_swiss_rounded
     *
     * @return bool|null
     */
    public function getIsDiscountSwissRounded()
    {
        return $this->container['is_discount_swiss_rounded'];
    }

    /**
     * Sets is_discount_swiss_rounded
     *
     * @param bool|null $is_discount_swiss_rounded is_discount_swiss_rounded
     *
     * @return self
     */
    public function setIsDiscountSwissRounded($is_discount_swiss_rounded)
    {
        if (is_null($is_discount_swiss_rounded)) {
            throw new \InvalidArgumentException('non-nullable is_discount_swiss_rounded cannot be null');
        }
        $this->container['is_discount_swiss_rounded'] = $is_discount_swiss_rounded;

        return $this;
    }

    /**
     * Gets is_kc_swiss_rounded
     *
     * @return bool|null
     */
    public function getIsKcSwissRounded()
    {
        return $this->container['is_kc_swiss_rounded'];
    }

    /**
     * Sets is_kc_swiss_rounded
     *
     * @param bool|null $is_kc_swiss_rounded is_kc_swiss_rounded
     *
     * @return self
     */
    public function setIsKcSwissRounded($is_kc_swiss_rounded)
    {
        if (is_null($is_kc_swiss_rounded)) {
            throw new \InvalidArgumentException('non-nullable is_kc_swiss_rounded cannot be null');
        }
        $this->container['is_kc_swiss_rounded'] = $is_kc_swiss_rounded;

        return $this;
    }

    /**
     * Gets is_template
     *
     * @return bool|null
     */
    public function getIsTemplate()
    {
        return $this->container['is_template'];
    }

    /**
     * Sets is_template
     *
     * @param bool|null $is_template is_template
     *
     * @return self
     */
    public function setIsTemplate($is_template)
    {
        if (is_null($is_template)) {
            throw new \InvalidArgumentException('non-nullable is_template cannot be null');
        }
        $this->container['is_template'] = $is_template;

        return $this;
    }

    /**
     * Gets is_vat_swiss_rounded
     *
     * @return bool|null
     */
    public function getIsVatSwissRounded()
    {
        return $this->container['is_vat_swiss_rounded'];
    }

    /**
     * Sets is_vat_swiss_rounded
     *
     * @param bool|null $is_vat_swiss_rounded is_vat_swiss_rounded
     *
     * @return self
     */
    public function setIsVatSwissRounded($is_vat_swiss_rounded)
    {
        if (is_null($is_vat_swiss_rounded)) {
            throw new \InvalidArgumentException('non-nullable is_vat_swiss_rounded cannot be null');
        }
        $this->container['is_vat_swiss_rounded'] = $is_vat_swiss_rounded;

        return $this;
    }

    /**
     * Gets vat_agreed
     *
     * @return bool|null
     */
    public function getVatAgreed()
    {
        return $this->container['vat_agreed'];
    }

    /**
     * Sets vat_agreed
     *
     * @param bool|null $vat_agreed vat_agreed
     *
     * @return self
     */
    public function setVatAgreed($vat_agreed)
    {
        if (is_null($vat_agreed)) {
            throw new \InvalidArgumentException('non-nullable vat_agreed cannot be null');
        }
        $this->container['vat_agreed'] = $vat_agreed;

        return $this;
    }

    /**
     * Gets vat_payment_based
     *
     * @return bool|null
     */
    public function getVatPaymentBased()
    {
        return $this->container['vat_payment_based'];
    }

    /**
     * Sets vat_payment_based
     *
     * @param bool|null $vat_payment_based vat_payment_based
     *
     * @return self
     */
    public function setVatPaymentBased($vat_payment_based)
    {
        if (is_null($vat_payment_based)) {
            throw new \InvalidArgumentException('non-nullable vat_payment_based cannot be null');
        }
        $this->container['vat_payment_based'] = $vat_payment_based;

        return $this;
    }

    /**
     * Gets vat_required
     *
     * @return bool|null
     */
    public function getVatRequired()
    {
        return $this->container['vat_required'];
    }

    /**
     * Sets vat_required
     *
     * @param bool|null $vat_required vat_required
     *
     * @return self
     */
    public function setVatRequired($vat_required)
    {
        if (is_null($vat_required)) {
            throw new \InvalidArgumentException('non-nullable vat_required cannot be null');
        }
        $this->container['vat_required'] = $vat_required;

        return $this;
    }

    /**
     * Gets vat_simplefied
     *
     * @return bool|null
     */
    public function getVatSimplefied()
    {
        return $this->container['vat_simplefied'];
    }

    /**
     * Sets vat_simplefied
     *
     * @param bool|null $vat_simplefied vat_simplefied
     *
     * @return self
     */
    public function setVatSimplefied($vat_simplefied)
    {
        if (is_null($vat_simplefied)) {
            throw new \InvalidArgumentException('non-nullable vat_simplefied cannot be null');
        }
        $this->container['vat_simplefied'] = $vat_simplefied;

        return $this;
    }

    /**
     * Gets is_current
     *
     * @return bool|null
     */
    public function getIsCurrent()
    {
        return $this->container['is_current'];
    }

    /**
     * Sets is_current
     *
     * @param bool|null $is_current is_current
     *
     * @return self
     */
    public function setIsCurrent($is_current)
    {
        if (is_null($is_current)) {
            throw new \InvalidArgumentException('non-nullable is_current cannot be null');
        }
        $this->container['is_current'] = $is_current;

        return $this;
    }

    /**
     * Gets is_password_protected
     *
     * @return bool|null
     */
    public function getIsPasswordProtected()
    {
        return $this->container['is_password_protected'];
    }

    /**
     * Sets is_password_protected
     *
     * @param bool|null $is_password_protected is_password_protected
     *
     * @return self
     */
    public function setIsPasswordProtected($is_password_protected)
    {
        if (is_null($is_password_protected)) {
            throw new \InvalidArgumentException('non-nullable is_password_protected cannot be null');
        }
        $this->container['is_password_protected'] = $is_password_protected;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code currency_code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets fiscal_years
     *
     * @return \OpenAPI\Client\Model\FiscalYear[]|null
     */
    public function getFiscalYears()
    {
        return $this->container['fiscal_years'];
    }

    /**
     * Sets fiscal_years
     *
     * @param \OpenAPI\Client\Model\FiscalYear[]|null $fiscal_years fiscal_years
     *
     * @return self
     */
    public function setFiscalYears($fiscal_years)
    {
        if (is_null($fiscal_years)) {
            throw new \InvalidArgumentException('non-nullable fiscal_years cannot be null');
        }
        $this->container['fiscal_years'] = $fiscal_years;

        return $this;
    }

    /**
     * Gets vat_periods
     *
     * @return \OpenAPI\Client\Model\VATPeriod[]|null
     */
    public function getVatPeriods()
    {
        return $this->container['vat_periods'];
    }

    /**
     * Sets vat_periods
     *
     * @param \OpenAPI\Client\Model\VATPeriod[]|null $vat_periods vat_periods
     *
     * @return self
     */
    public function setVatPeriods($vat_periods)
    {
        if (is_null($vat_periods)) {
            throw new \InvalidArgumentException('non-nullable vat_periods cannot be null');
        }
        $this->container['vat_periods'] = $vat_periods;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


