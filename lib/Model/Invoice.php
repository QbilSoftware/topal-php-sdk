<?php
/**
 * Invoice
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Topal REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Topal\Client\Model;

use \ArrayAccess;
use \Topal\Client\ObjectSerializer;

/**
 * Invoice Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Invoice implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'authorizer_fid' => 'int',
        'party_fid' => 'int',
        'pay_method_fid' => 'int',
        'pay_term_fid' => 'int',
        'vat_fid' => 'int',
        'person_role_fid' => 'int',
        'invoice_date' => '\DateTime',
        'due_date' => '\DateTime',
        'modify_date' => '\DateTime',
        'invoice_num' => 'int',
        'reminder_level' => 'int',
        'free_invoice_num' => 'string',
        'text' => 'string',
        'payslip_code' => 'string',
        'total_amount' => 'float',
        'total_amount_fc' => 'float',
        'exchange_rate' => 'float',
        'is_authorized' => 'bool',
        'no_reminders' => 'bool',
        'remarks' => 'string',
        'party_num' => 'int',
        'party_name' => 'string',
        'party_short_name' => 'string',
        'pay_term_code' => 'string',
        'account_code' => 'string',
        'currency_code' => 'string',
        'balance' => 'float',
        'balance_fc' => 'float',
        'bar_code' => 'string',
        'current_reminder_level' => 'int',
        'has_document' => 'int',
        'current_reminder_date' => '\DateTime',
        'payment_postings' => '\Topal\Client\Model\Posting[]',
        'transaction' => '\Topal\Client\Model\Transaction'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'authorizer_fid' => 'int32',
        'party_fid' => 'int32',
        'pay_method_fid' => 'int32',
        'pay_term_fid' => 'int32',
        'vat_fid' => 'int32',
        'person_role_fid' => 'int32',
        'invoice_date' => 'date-time',
        'due_date' => 'date-time',
        'modify_date' => 'date-time',
        'invoice_num' => 'int32',
        'reminder_level' => 'int32',
        'free_invoice_num' => null,
        'text' => null,
        'payslip_code' => null,
        'total_amount' => 'double',
        'total_amount_fc' => 'double',
        'exchange_rate' => 'double',
        'is_authorized' => null,
        'no_reminders' => null,
        'remarks' => null,
        'party_num' => 'int32',
        'party_name' => null,
        'party_short_name' => null,
        'pay_term_code' => null,
        'account_code' => null,
        'currency_code' => null,
        'balance' => 'double',
        'balance_fc' => 'double',
        'bar_code' => null,
        'current_reminder_level' => 'int32',
        'has_document' => 'int32',
        'current_reminder_date' => 'date-time',
        'payment_postings' => null,
        'transaction' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'authorizer_fid' => false,
        'party_fid' => false,
        'pay_method_fid' => false,
        'pay_term_fid' => false,
        'vat_fid' => false,
        'person_role_fid' => false,
        'invoice_date' => false,
        'due_date' => false,
        'modify_date' => false,
        'invoice_num' => false,
        'reminder_level' => false,
        'free_invoice_num' => false,
        'text' => false,
        'payslip_code' => false,
        'total_amount' => false,
        'total_amount_fc' => false,
        'exchange_rate' => false,
        'is_authorized' => false,
        'no_reminders' => false,
        'remarks' => false,
        'party_num' => false,
        'party_name' => false,
        'party_short_name' => false,
        'pay_term_code' => false,
        'account_code' => false,
        'currency_code' => false,
        'balance' => false,
        'balance_fc' => false,
        'bar_code' => false,
        'current_reminder_level' => false,
        'has_document' => false,
        'current_reminder_date' => false,
        'payment_postings' => false,
        'transaction' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'authorizer_fid' => 'authorizerFID',
        'party_fid' => 'partyFID',
        'pay_method_fid' => 'payMethodFID',
        'pay_term_fid' => 'payTermFID',
        'vat_fid' => 'vatFID',
        'person_role_fid' => 'personRoleFID',
        'invoice_date' => 'invoiceDate',
        'due_date' => 'dueDate',
        'modify_date' => 'modifyDate',
        'invoice_num' => 'invoiceNum',
        'reminder_level' => 'reminderLevel',
        'free_invoice_num' => 'freeInvoiceNum',
        'text' => 'text',
        'payslip_code' => 'PayslipCode',
        'total_amount' => 'totalAmount',
        'total_amount_fc' => 'totalAmountFC',
        'exchange_rate' => 'exchangeRate',
        'is_authorized' => 'IsAuthorized',
        'no_reminders' => 'noReminders',
        'remarks' => 'Remarks',
        'party_num' => 'partyNum',
        'party_name' => 'partyName',
        'party_short_name' => 'partyShortName',
        'pay_term_code' => 'payTermCode',
        'account_code' => 'accountCode',
        'currency_code' => 'currencyCode',
        'balance' => 'balance',
        'balance_fc' => 'balanceFC',
        'bar_code' => 'barCode',
        'current_reminder_level' => 'currentReminderLevel',
        'has_document' => 'hasDocument',
        'current_reminder_date' => 'currentReminderDate',
        'payment_postings' => 'paymentPostings',
        'transaction' => 'transaction'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'authorizer_fid' => 'setAuthorizerFid',
        'party_fid' => 'setPartyFid',
        'pay_method_fid' => 'setPayMethodFid',
        'pay_term_fid' => 'setPayTermFid',
        'vat_fid' => 'setVatFid',
        'person_role_fid' => 'setPersonRoleFid',
        'invoice_date' => 'setInvoiceDate',
        'due_date' => 'setDueDate',
        'modify_date' => 'setModifyDate',
        'invoice_num' => 'setInvoiceNum',
        'reminder_level' => 'setReminderLevel',
        'free_invoice_num' => 'setFreeInvoiceNum',
        'text' => 'setText',
        'payslip_code' => 'setPayslipCode',
        'total_amount' => 'setTotalAmount',
        'total_amount_fc' => 'setTotalAmountFc',
        'exchange_rate' => 'setExchangeRate',
        'is_authorized' => 'setIsAuthorized',
        'no_reminders' => 'setNoReminders',
        'remarks' => 'setRemarks',
        'party_num' => 'setPartyNum',
        'party_name' => 'setPartyName',
        'party_short_name' => 'setPartyShortName',
        'pay_term_code' => 'setPayTermCode',
        'account_code' => 'setAccountCode',
        'currency_code' => 'setCurrencyCode',
        'balance' => 'setBalance',
        'balance_fc' => 'setBalanceFc',
        'bar_code' => 'setBarCode',
        'current_reminder_level' => 'setCurrentReminderLevel',
        'has_document' => 'setHasDocument',
        'current_reminder_date' => 'setCurrentReminderDate',
        'payment_postings' => 'setPaymentPostings',
        'transaction' => 'setTransaction'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'authorizer_fid' => 'getAuthorizerFid',
        'party_fid' => 'getPartyFid',
        'pay_method_fid' => 'getPayMethodFid',
        'pay_term_fid' => 'getPayTermFid',
        'vat_fid' => 'getVatFid',
        'person_role_fid' => 'getPersonRoleFid',
        'invoice_date' => 'getInvoiceDate',
        'due_date' => 'getDueDate',
        'modify_date' => 'getModifyDate',
        'invoice_num' => 'getInvoiceNum',
        'reminder_level' => 'getReminderLevel',
        'free_invoice_num' => 'getFreeInvoiceNum',
        'text' => 'getText',
        'payslip_code' => 'getPayslipCode',
        'total_amount' => 'getTotalAmount',
        'total_amount_fc' => 'getTotalAmountFc',
        'exchange_rate' => 'getExchangeRate',
        'is_authorized' => 'getIsAuthorized',
        'no_reminders' => 'getNoReminders',
        'remarks' => 'getRemarks',
        'party_num' => 'getPartyNum',
        'party_name' => 'getPartyName',
        'party_short_name' => 'getPartyShortName',
        'pay_term_code' => 'getPayTermCode',
        'account_code' => 'getAccountCode',
        'currency_code' => 'getCurrencyCode',
        'balance' => 'getBalance',
        'balance_fc' => 'getBalanceFc',
        'bar_code' => 'getBarCode',
        'current_reminder_level' => 'getCurrentReminderLevel',
        'has_document' => 'getHasDocument',
        'current_reminder_date' => 'getCurrentReminderDate',
        'payment_postings' => 'getPaymentPostings',
        'transaction' => 'getTransaction'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('authorizer_fid', $data ?? [], null);
        $this->setIfExists('party_fid', $data ?? [], null);
        $this->setIfExists('pay_method_fid', $data ?? [], null);
        $this->setIfExists('pay_term_fid', $data ?? [], null);
        $this->setIfExists('vat_fid', $data ?? [], null);
        $this->setIfExists('person_role_fid', $data ?? [], null);
        $this->setIfExists('invoice_date', $data ?? [], null);
        $this->setIfExists('due_date', $data ?? [], null);
        $this->setIfExists('modify_date', $data ?? [], null);
        $this->setIfExists('invoice_num', $data ?? [], null);
        $this->setIfExists('reminder_level', $data ?? [], null);
        $this->setIfExists('free_invoice_num', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('payslip_code', $data ?? [], null);
        $this->setIfExists('total_amount', $data ?? [], null);
        $this->setIfExists('total_amount_fc', $data ?? [], null);
        $this->setIfExists('exchange_rate', $data ?? [], null);
        $this->setIfExists('is_authorized', $data ?? [], null);
        $this->setIfExists('no_reminders', $data ?? [], null);
        $this->setIfExists('remarks', $data ?? [], null);
        $this->setIfExists('party_num', $data ?? [], null);
        $this->setIfExists('party_name', $data ?? [], null);
        $this->setIfExists('party_short_name', $data ?? [], null);
        $this->setIfExists('pay_term_code', $data ?? [], null);
        $this->setIfExists('account_code', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('balance_fc', $data ?? [], null);
        $this->setIfExists('bar_code', $data ?? [], null);
        $this->setIfExists('current_reminder_level', $data ?? [], null);
        $this->setIfExists('has_document', $data ?? [], null);
        $this->setIfExists('current_reminder_date', $data ?? [], null);
        $this->setIfExists('payment_postings', $data ?? [], null);
        $this->setIfExists('transaction', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['party_fid'] === null) {
            $invalidProperties[] = "'party_fid' can't be null";
        }
        if ($this->container['pay_method_fid'] === null) {
            $invalidProperties[] = "'pay_method_fid' can't be null";
        }
        if ($this->container['pay_term_fid'] === null) {
            $invalidProperties[] = "'pay_term_fid' can't be null";
        }
        if ($this->container['person_role_fid'] === null) {
            $invalidProperties[] = "'person_role_fid' can't be null";
        }
        if (($this->container['person_role_fid'] > 3)) {
            $invalidProperties[] = "invalid value for 'person_role_fid', must be smaller than or equal to 3.";
        }

        if (($this->container['person_role_fid'] < 1)) {
            $invalidProperties[] = "invalid value for 'person_role_fid', must be bigger than or equal to 1.";
        }

        if ($this->container['invoice_date'] === null) {
            $invalidProperties[] = "'invoice_date' can't be null";
        }
        if ($this->container['due_date'] === null) {
            $invalidProperties[] = "'due_date' can't be null";
        }
        if ($this->container['invoice_num'] === null) {
            $invalidProperties[] = "'invoice_num' can't be null";
        }
        if ($this->container['total_amount'] === null) {
            $invalidProperties[] = "'total_amount' can't be null";
        }
        if ($this->container['total_amount_fc'] === null) {
            $invalidProperties[] = "'total_amount_fc' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets authorizer_fid
     *
     * @return int|null
     */
    public function getAuthorizerFid()
    {
        return $this->container['authorizer_fid'];
    }

    /**
     * Sets authorizer_fid
     *
     * @param int|null $authorizer_fid authorizer_fid
     *
     * @return self
     */
    public function setAuthorizerFid($authorizer_fid)
    {
        if (is_null($authorizer_fid)) {
            throw new \InvalidArgumentException('non-nullable authorizer_fid cannot be null');
        }
        $this->container['authorizer_fid'] = $authorizer_fid;

        return $this;
    }

    /**
     * Gets party_fid
     *
     * @return int
     */
    public function getPartyFid()
    {
        return $this->container['party_fid'];
    }

    /**
     * Sets party_fid
     *
     * @param int $party_fid party_fid
     *
     * @return self
     */
    public function setPartyFid($party_fid)
    {
        if (is_null($party_fid)) {
            throw new \InvalidArgumentException('non-nullable party_fid cannot be null');
        }
        $this->container['party_fid'] = $party_fid;

        return $this;
    }

    /**
     * Gets pay_method_fid
     *
     * @return int
     */
    public function getPayMethodFid()
    {
        return $this->container['pay_method_fid'];
    }

    /**
     * Sets pay_method_fid
     *
     * @param int $pay_method_fid pay_method_fid
     *
     * @return self
     */
    public function setPayMethodFid($pay_method_fid)
    {
        if (is_null($pay_method_fid)) {
            throw new \InvalidArgumentException('non-nullable pay_method_fid cannot be null');
        }
        $this->container['pay_method_fid'] = $pay_method_fid;

        return $this;
    }

    /**
     * Gets pay_term_fid
     *
     * @return int
     */
    public function getPayTermFid()
    {
        return $this->container['pay_term_fid'];
    }

    /**
     * Sets pay_term_fid
     *
     * @param int $pay_term_fid pay_term_fid
     *
     * @return self
     */
    public function setPayTermFid($pay_term_fid)
    {
        if (is_null($pay_term_fid)) {
            throw new \InvalidArgumentException('non-nullable pay_term_fid cannot be null');
        }
        $this->container['pay_term_fid'] = $pay_term_fid;

        return $this;
    }

    /**
     * Gets vat_fid
     *
     * @return int|null
     */
    public function getVatFid()
    {
        return $this->container['vat_fid'];
    }

    /**
     * Sets vat_fid
     *
     * @param int|null $vat_fid vat_fid
     *
     * @return self
     */
    public function setVatFid($vat_fid)
    {
        if (is_null($vat_fid)) {
            throw new \InvalidArgumentException('non-nullable vat_fid cannot be null');
        }
        $this->container['vat_fid'] = $vat_fid;

        return $this;
    }

    /**
     * Gets person_role_fid
     *
     * @return int
     */
    public function getPersonRoleFid()
    {
        return $this->container['person_role_fid'];
    }

    /**
     * Sets person_role_fid
     *
     * @param int $person_role_fid person_role_fid
     *
     * @return self
     */
    public function setPersonRoleFid($person_role_fid)
    {
        if (is_null($person_role_fid)) {
            throw new \InvalidArgumentException('non-nullable person_role_fid cannot be null');
        }

        if (($person_role_fid > 3)) {
            throw new \InvalidArgumentException('invalid value for $person_role_fid when calling Invoice., must be smaller than or equal to 3.');
        }
        if (($person_role_fid < 1)) {
            throw new \InvalidArgumentException('invalid value for $person_role_fid when calling Invoice., must be bigger than or equal to 1.');
        }

        $this->container['person_role_fid'] = $person_role_fid;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return \DateTime
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param \DateTime $invoice_date invoice_date
     *
     * @return self
     */
    public function setInvoiceDate($invoice_date)
    {
        if (is_null($invoice_date)) {
            throw new \InvalidArgumentException('non-nullable invoice_date cannot be null');
        }
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date due_date
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        if (is_null($due_date)) {
            throw new \InvalidArgumentException('non-nullable due_date cannot be null');
        }
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets modify_date
     *
     * @return \DateTime|null
     */
    public function getModifyDate()
    {
        return $this->container['modify_date'];
    }

    /**
     * Sets modify_date
     *
     * @param \DateTime|null $modify_date modify_date
     *
     * @return self
     */
    public function setModifyDate($modify_date)
    {
        if (is_null($modify_date)) {
            throw new \InvalidArgumentException('non-nullable modify_date cannot be null');
        }
        $this->container['modify_date'] = $modify_date;

        return $this;
    }

    /**
     * Gets invoice_num
     *
     * @return int
     */
    public function getInvoiceNum()
    {
        return $this->container['invoice_num'];
    }

    /**
     * Sets invoice_num
     *
     * @param int $invoice_num invoice_num
     *
     * @return self
     */
    public function setInvoiceNum($invoice_num)
    {
        if (is_null($invoice_num)) {
            throw new \InvalidArgumentException('non-nullable invoice_num cannot be null');
        }
        $this->container['invoice_num'] = $invoice_num;

        return $this;
    }

    /**
     * Gets reminder_level
     *
     * @return int|null
     */
    public function getReminderLevel()
    {
        return $this->container['reminder_level'];
    }

    /**
     * Sets reminder_level
     *
     * @param int|null $reminder_level reminder_level
     *
     * @return self
     */
    public function setReminderLevel($reminder_level)
    {
        if (is_null($reminder_level)) {
            throw new \InvalidArgumentException('non-nullable reminder_level cannot be null');
        }
        $this->container['reminder_level'] = $reminder_level;

        return $this;
    }

    /**
     * Gets free_invoice_num
     *
     * @return string|null
     */
    public function getFreeInvoiceNum()
    {
        return $this->container['free_invoice_num'];
    }

    /**
     * Sets free_invoice_num
     *
     * @param string|null $free_invoice_num free_invoice_num
     *
     * @return self
     */
    public function setFreeInvoiceNum($free_invoice_num)
    {
        if (is_null($free_invoice_num)) {
            throw new \InvalidArgumentException('non-nullable free_invoice_num cannot be null');
        }
        $this->container['free_invoice_num'] = $free_invoice_num;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text text
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets payslip_code
     *
     * @return string|null
     */
    public function getPayslipCode()
    {
        return $this->container['payslip_code'];
    }

    /**
     * Sets payslip_code
     *
     * @param string|null $payslip_code payslip_code
     *
     * @return self
     */
    public function setPayslipCode($payslip_code)
    {
        if (is_null($payslip_code)) {
            throw new \InvalidArgumentException('non-nullable payslip_code cannot be null');
        }
        $this->container['payslip_code'] = $payslip_code;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return float
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param float $total_amount total_amount
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        if (is_null($total_amount)) {
            throw new \InvalidArgumentException('non-nullable total_amount cannot be null');
        }
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets total_amount_fc
     *
     * @return float
     */
    public function getTotalAmountFc()
    {
        return $this->container['total_amount_fc'];
    }

    /**
     * Sets total_amount_fc
     *
     * @param float $total_amount_fc total_amount_fc
     *
     * @return self
     */
    public function setTotalAmountFc($total_amount_fc)
    {
        if (is_null($total_amount_fc)) {
            throw new \InvalidArgumentException('non-nullable total_amount_fc cannot be null');
        }
        $this->container['total_amount_fc'] = $total_amount_fc;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return float|null
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param float|null $exchange_rate exchange_rate
     *
     * @return self
     */
    public function setExchangeRate($exchange_rate)
    {
        if (is_null($exchange_rate)) {
            throw new \InvalidArgumentException('non-nullable exchange_rate cannot be null');
        }
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets is_authorized
     *
     * @return bool|null
     */
    public function getIsAuthorized()
    {
        return $this->container['is_authorized'];
    }

    /**
     * Sets is_authorized
     *
     * @param bool|null $is_authorized is_authorized
     *
     * @return self
     */
    public function setIsAuthorized($is_authorized)
    {
        if (is_null($is_authorized)) {
            throw new \InvalidArgumentException('non-nullable is_authorized cannot be null');
        }
        $this->container['is_authorized'] = $is_authorized;

        return $this;
    }

    /**
     * Gets no_reminders
     *
     * @return bool|null
     */
    public function getNoReminders()
    {
        return $this->container['no_reminders'];
    }

    /**
     * Sets no_reminders
     *
     * @param bool|null $no_reminders no_reminders
     *
     * @return self
     */
    public function setNoReminders($no_reminders)
    {
        if (is_null($no_reminders)) {
            throw new \InvalidArgumentException('non-nullable no_reminders cannot be null');
        }
        $this->container['no_reminders'] = $no_reminders;

        return $this;
    }

    /**
     * Gets remarks
     *
     * @return string|null
     */
    public function getRemarks()
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks
     *
     * @param string|null $remarks remarks
     *
     * @return self
     */
    public function setRemarks($remarks)
    {
        if (is_null($remarks)) {
            throw new \InvalidArgumentException('non-nullable remarks cannot be null');
        }
        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets party_num
     *
     * @return int|null
     */
    public function getPartyNum()
    {
        return $this->container['party_num'];
    }

    /**
     * Sets party_num
     *
     * @param int|null $party_num party_num
     *
     * @return self
     */
    public function setPartyNum($party_num)
    {
        if (is_null($party_num)) {
            throw new \InvalidArgumentException('non-nullable party_num cannot be null');
        }
        $this->container['party_num'] = $party_num;

        return $this;
    }

    /**
     * Gets party_name
     *
     * @return string|null
     */
    public function getPartyName()
    {
        return $this->container['party_name'];
    }

    /**
     * Sets party_name
     *
     * @param string|null $party_name party_name
     *
     * @return self
     */
    public function setPartyName($party_name)
    {
        if (is_null($party_name)) {
            throw new \InvalidArgumentException('non-nullable party_name cannot be null');
        }
        $this->container['party_name'] = $party_name;

        return $this;
    }

    /**
     * Gets party_short_name
     *
     * @return string|null
     */
    public function getPartyShortName()
    {
        return $this->container['party_short_name'];
    }

    /**
     * Sets party_short_name
     *
     * @param string|null $party_short_name party_short_name
     *
     * @return self
     */
    public function setPartyShortName($party_short_name)
    {
        if (is_null($party_short_name)) {
            throw new \InvalidArgumentException('non-nullable party_short_name cannot be null');
        }
        $this->container['party_short_name'] = $party_short_name;

        return $this;
    }

    /**
     * Gets pay_term_code
     *
     * @return string|null
     */
    public function getPayTermCode()
    {
        return $this->container['pay_term_code'];
    }

    /**
     * Sets pay_term_code
     *
     * @param string|null $pay_term_code pay_term_code
     *
     * @return self
     */
    public function setPayTermCode($pay_term_code)
    {
        if (is_null($pay_term_code)) {
            throw new \InvalidArgumentException('non-nullable pay_term_code cannot be null');
        }
        $this->container['pay_term_code'] = $pay_term_code;

        return $this;
    }

    /**
     * Gets account_code
     *
     * @return string|null
     */
    public function getAccountCode()
    {
        return $this->container['account_code'];
    }

    /**
     * Sets account_code
     *
     * @param string|null $account_code account_code
     *
     * @return self
     */
    public function setAccountCode($account_code)
    {
        if (is_null($account_code)) {
            throw new \InvalidArgumentException('non-nullable account_code cannot be null');
        }
        $this->container['account_code'] = $account_code;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code currency_code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets balance_fc
     *
     * @return float|null
     */
    public function getBalanceFc()
    {
        return $this->container['balance_fc'];
    }

    /**
     * Sets balance_fc
     *
     * @param float|null $balance_fc balance_fc
     *
     * @return self
     */
    public function setBalanceFc($balance_fc)
    {
        if (is_null($balance_fc)) {
            throw new \InvalidArgumentException('non-nullable balance_fc cannot be null');
        }
        $this->container['balance_fc'] = $balance_fc;

        return $this;
    }

    /**
     * Gets bar_code
     *
     * @return string|null
     */
    public function getBarCode()
    {
        return $this->container['bar_code'];
    }

    /**
     * Sets bar_code
     *
     * @param string|null $bar_code bar_code
     *
     * @return self
     */
    public function setBarCode($bar_code)
    {
        if (is_null($bar_code)) {
            throw new \InvalidArgumentException('non-nullable bar_code cannot be null');
        }
        $this->container['bar_code'] = $bar_code;

        return $this;
    }

    /**
     * Gets current_reminder_level
     *
     * @return int|null
     */
    public function getCurrentReminderLevel()
    {
        return $this->container['current_reminder_level'];
    }

    /**
     * Sets current_reminder_level
     *
     * @param int|null $current_reminder_level current_reminder_level
     *
     * @return self
     */
    public function setCurrentReminderLevel($current_reminder_level)
    {
        if (is_null($current_reminder_level)) {
            throw new \InvalidArgumentException('non-nullable current_reminder_level cannot be null');
        }
        $this->container['current_reminder_level'] = $current_reminder_level;

        return $this;
    }

    /**
     * Gets has_document
     *
     * @return int|null
     */
    public function getHasDocument()
    {
        return $this->container['has_document'];
    }

    /**
     * Sets has_document
     *
     * @param int|null $has_document has_document
     *
     * @return self
     */
    public function setHasDocument($has_document)
    {
        if (is_null($has_document)) {
            throw new \InvalidArgumentException('non-nullable has_document cannot be null');
        }
        $this->container['has_document'] = $has_document;

        return $this;
    }

    /**
     * Gets current_reminder_date
     *
     * @return \DateTime|null
     */
    public function getCurrentReminderDate()
    {
        return $this->container['current_reminder_date'];
    }

    /**
     * Sets current_reminder_date
     *
     * @param \DateTime|null $current_reminder_date current_reminder_date
     *
     * @return self
     */
    public function setCurrentReminderDate($current_reminder_date)
    {
        if (is_null($current_reminder_date)) {
            throw new \InvalidArgumentException('non-nullable current_reminder_date cannot be null');
        }
        $this->container['current_reminder_date'] = $current_reminder_date;

        return $this;
    }

    /**
     * Gets payment_postings
     *
     * @return \Topal\Client\Model\Posting[]|null
     */
    public function getPaymentPostings()
    {
        return $this->container['payment_postings'];
    }

    /**
     * Sets payment_postings
     *
     * @param \Topal\Client\Model\Posting[]|null $payment_postings payment_postings
     *
     * @return self
     */
    public function setPaymentPostings($payment_postings)
    {
        if (is_null($payment_postings)) {
            throw new \InvalidArgumentException('non-nullable payment_postings cannot be null');
        }
        $this->container['payment_postings'] = $payment_postings;

        return $this;
    }

    /**
     * Gets transaction
     *
     * @return \Topal\Client\Model\Transaction|null
     */
    public function getTransaction()
    {
        return $this->container['transaction'];
    }

    /**
     * Sets transaction
     *
     * @param \Topal\Client\Model\Transaction|null $transaction transaction
     *
     * @return self
     */
    public function setTransaction($transaction)
    {
        if (is_null($transaction)) {
            throw new \InvalidArgumentException('non-nullable transaction cannot be null');
        }
        $this->container['transaction'] = $transaction;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


