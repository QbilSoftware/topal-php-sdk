<?php
/**
 * Payment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Topal REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Payment Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Payment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Payment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'account_fid' => 'int',
        'party_fid' => 'int',
        'person_role_fid' => 'int',
        'text' => 'string',
        'payment_transaction_type_fid' => 'int',
        'amount' => 'float',
        'amount_fc' => 'float',
        'payment_rate' => 'float',
        'payment_num' => 'int',
        'account_code' => 'string',
        'account_name' => 'string',
        'currency_code' => 'string',
        'currency_fid' => 'int',
        'party_num' => 'int',
        'party_name' => 'string',
        'party_short_name' => 'string',
        'free_party_num' => 'string',
        'invoice_count' => 'int',
        'payment_details' => '\OpenAPI\Client\Model\PaymentDetail[]',
        'transaction' => '\OpenAPI\Client\Model\Transaction'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'account_fid' => 'int32',
        'party_fid' => 'int32',
        'person_role_fid' => 'int32',
        'text' => null,
        'payment_transaction_type_fid' => 'int32',
        'amount' => 'double',
        'amount_fc' => 'double',
        'payment_rate' => 'double',
        'payment_num' => 'int32',
        'account_code' => null,
        'account_name' => null,
        'currency_code' => null,
        'currency_fid' => 'int32',
        'party_num' => 'int32',
        'party_name' => null,
        'party_short_name' => null,
        'free_party_num' => null,
        'invoice_count' => 'int32',
        'payment_details' => null,
        'transaction' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'account_fid' => false,
        'party_fid' => false,
        'person_role_fid' => false,
        'text' => false,
        'payment_transaction_type_fid' => false,
        'amount' => false,
        'amount_fc' => false,
        'payment_rate' => false,
        'payment_num' => false,
        'account_code' => false,
        'account_name' => false,
        'currency_code' => false,
        'currency_fid' => false,
        'party_num' => false,
        'party_name' => false,
        'party_short_name' => false,
        'free_party_num' => false,
        'invoice_count' => false,
        'payment_details' => false,
        'transaction' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'account_fid' => 'accountFID',
        'party_fid' => 'partyFID',
        'person_role_fid' => 'personRoleFID',
        'text' => 'text',
        'payment_transaction_type_fid' => 'paymentTransactionTypeFID',
        'amount' => 'amount',
        'amount_fc' => 'amountFC',
        'payment_rate' => 'paymentRate',
        'payment_num' => 'paymentNum',
        'account_code' => 'accountCode',
        'account_name' => 'accountName',
        'currency_code' => 'currencyCode',
        'currency_fid' => 'currencyFID',
        'party_num' => 'partyNum',
        'party_name' => 'partyName',
        'party_short_name' => 'partyShortName',
        'free_party_num' => 'freePartyNum',
        'invoice_count' => 'invoiceCount',
        'payment_details' => 'paymentDetails',
        'transaction' => 'transaction'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'account_fid' => 'setAccountFid',
        'party_fid' => 'setPartyFid',
        'person_role_fid' => 'setPersonRoleFid',
        'text' => 'setText',
        'payment_transaction_type_fid' => 'setPaymentTransactionTypeFid',
        'amount' => 'setAmount',
        'amount_fc' => 'setAmountFc',
        'payment_rate' => 'setPaymentRate',
        'payment_num' => 'setPaymentNum',
        'account_code' => 'setAccountCode',
        'account_name' => 'setAccountName',
        'currency_code' => 'setCurrencyCode',
        'currency_fid' => 'setCurrencyFid',
        'party_num' => 'setPartyNum',
        'party_name' => 'setPartyName',
        'party_short_name' => 'setPartyShortName',
        'free_party_num' => 'setFreePartyNum',
        'invoice_count' => 'setInvoiceCount',
        'payment_details' => 'setPaymentDetails',
        'transaction' => 'setTransaction'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'account_fid' => 'getAccountFid',
        'party_fid' => 'getPartyFid',
        'person_role_fid' => 'getPersonRoleFid',
        'text' => 'getText',
        'payment_transaction_type_fid' => 'getPaymentTransactionTypeFid',
        'amount' => 'getAmount',
        'amount_fc' => 'getAmountFc',
        'payment_rate' => 'getPaymentRate',
        'payment_num' => 'getPaymentNum',
        'account_code' => 'getAccountCode',
        'account_name' => 'getAccountName',
        'currency_code' => 'getCurrencyCode',
        'currency_fid' => 'getCurrencyFid',
        'party_num' => 'getPartyNum',
        'party_name' => 'getPartyName',
        'party_short_name' => 'getPartyShortName',
        'free_party_num' => 'getFreePartyNum',
        'invoice_count' => 'getInvoiceCount',
        'payment_details' => 'getPaymentDetails',
        'transaction' => 'getTransaction'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('account_fid', $data ?? [], null);
        $this->setIfExists('party_fid', $data ?? [], null);
        $this->setIfExists('person_role_fid', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('payment_transaction_type_fid', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('amount_fc', $data ?? [], null);
        $this->setIfExists('payment_rate', $data ?? [], null);
        $this->setIfExists('payment_num', $data ?? [], null);
        $this->setIfExists('account_code', $data ?? [], null);
        $this->setIfExists('account_name', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('currency_fid', $data ?? [], null);
        $this->setIfExists('party_num', $data ?? [], null);
        $this->setIfExists('party_name', $data ?? [], null);
        $this->setIfExists('party_short_name', $data ?? [], null);
        $this->setIfExists('free_party_num', $data ?? [], null);
        $this->setIfExists('invoice_count', $data ?? [], null);
        $this->setIfExists('payment_details', $data ?? [], null);
        $this->setIfExists('transaction', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_fid'] === null) {
            $invalidProperties[] = "'account_fid' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['amount_fc'] === null) {
            $invalidProperties[] = "'amount_fc' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets account_fid
     *
     * @return int
     */
    public function getAccountFid()
    {
        return $this->container['account_fid'];
    }

    /**
     * Sets account_fid
     *
     * @param int $account_fid account_fid
     *
     * @return self
     */
    public function setAccountFid($account_fid)
    {
        if (is_null($account_fid)) {
            throw new \InvalidArgumentException('non-nullable account_fid cannot be null');
        }
        $this->container['account_fid'] = $account_fid;

        return $this;
    }

    /**
     * Gets party_fid
     *
     * @return int|null
     */
    public function getPartyFid()
    {
        return $this->container['party_fid'];
    }

    /**
     * Sets party_fid
     *
     * @param int|null $party_fid party_fid
     *
     * @return self
     */
    public function setPartyFid($party_fid)
    {
        if (is_null($party_fid)) {
            throw new \InvalidArgumentException('non-nullable party_fid cannot be null');
        }
        $this->container['party_fid'] = $party_fid;

        return $this;
    }

    /**
     * Gets person_role_fid
     *
     * @return int|null
     */
    public function getPersonRoleFid()
    {
        return $this->container['person_role_fid'];
    }

    /**
     * Sets person_role_fid
     *
     * @param int|null $person_role_fid person_role_fid
     *
     * @return self
     */
    public function setPersonRoleFid($person_role_fid)
    {
        if (is_null($person_role_fid)) {
            throw new \InvalidArgumentException('non-nullable person_role_fid cannot be null');
        }
        $this->container['person_role_fid'] = $person_role_fid;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text text
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets payment_transaction_type_fid
     *
     * @return int|null
     */
    public function getPaymentTransactionTypeFid()
    {
        return $this->container['payment_transaction_type_fid'];
    }

    /**
     * Sets payment_transaction_type_fid
     *
     * @param int|null $payment_transaction_type_fid payment_transaction_type_fid
     *
     * @return self
     */
    public function setPaymentTransactionTypeFid($payment_transaction_type_fid)
    {
        if (is_null($payment_transaction_type_fid)) {
            throw new \InvalidArgumentException('non-nullable payment_transaction_type_fid cannot be null');
        }
        $this->container['payment_transaction_type_fid'] = $payment_transaction_type_fid;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_fc
     *
     * @return float
     */
    public function getAmountFc()
    {
        return $this->container['amount_fc'];
    }

    /**
     * Sets amount_fc
     *
     * @param float $amount_fc amount_fc
     *
     * @return self
     */
    public function setAmountFc($amount_fc)
    {
        if (is_null($amount_fc)) {
            throw new \InvalidArgumentException('non-nullable amount_fc cannot be null');
        }
        $this->container['amount_fc'] = $amount_fc;

        return $this;
    }

    /**
     * Gets payment_rate
     *
     * @return float|null
     */
    public function getPaymentRate()
    {
        return $this->container['payment_rate'];
    }

    /**
     * Sets payment_rate
     *
     * @param float|null $payment_rate payment_rate
     *
     * @return self
     */
    public function setPaymentRate($payment_rate)
    {
        if (is_null($payment_rate)) {
            throw new \InvalidArgumentException('non-nullable payment_rate cannot be null');
        }
        $this->container['payment_rate'] = $payment_rate;

        return $this;
    }

    /**
     * Gets payment_num
     *
     * @return int|null
     */
    public function getPaymentNum()
    {
        return $this->container['payment_num'];
    }

    /**
     * Sets payment_num
     *
     * @param int|null $payment_num payment_num
     *
     * @return self
     */
    public function setPaymentNum($payment_num)
    {
        if (is_null($payment_num)) {
            throw new \InvalidArgumentException('non-nullable payment_num cannot be null');
        }
        $this->container['payment_num'] = $payment_num;

        return $this;
    }

    /**
     * Gets account_code
     *
     * @return string|null
     */
    public function getAccountCode()
    {
        return $this->container['account_code'];
    }

    /**
     * Sets account_code
     *
     * @param string|null $account_code account_code
     *
     * @return self
     */
    public function setAccountCode($account_code)
    {
        if (is_null($account_code)) {
            throw new \InvalidArgumentException('non-nullable account_code cannot be null');
        }
        $this->container['account_code'] = $account_code;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string|null
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string|null $account_name account_name
     *
     * @return self
     */
    public function setAccountName($account_name)
    {
        if (is_null($account_name)) {
            throw new \InvalidArgumentException('non-nullable account_name cannot be null');
        }
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code currency_code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets currency_fid
     *
     * @return int|null
     */
    public function getCurrencyFid()
    {
        return $this->container['currency_fid'];
    }

    /**
     * Sets currency_fid
     *
     * @param int|null $currency_fid currency_fid
     *
     * @return self
     */
    public function setCurrencyFid($currency_fid)
    {
        if (is_null($currency_fid)) {
            throw new \InvalidArgumentException('non-nullable currency_fid cannot be null');
        }
        $this->container['currency_fid'] = $currency_fid;

        return $this;
    }

    /**
     * Gets party_num
     *
     * @return int|null
     */
    public function getPartyNum()
    {
        return $this->container['party_num'];
    }

    /**
     * Sets party_num
     *
     * @param int|null $party_num party_num
     *
     * @return self
     */
    public function setPartyNum($party_num)
    {
        if (is_null($party_num)) {
            throw new \InvalidArgumentException('non-nullable party_num cannot be null');
        }
        $this->container['party_num'] = $party_num;

        return $this;
    }

    /**
     * Gets party_name
     *
     * @return string|null
     */
    public function getPartyName()
    {
        return $this->container['party_name'];
    }

    /**
     * Sets party_name
     *
     * @param string|null $party_name party_name
     *
     * @return self
     */
    public function setPartyName($party_name)
    {
        if (is_null($party_name)) {
            throw new \InvalidArgumentException('non-nullable party_name cannot be null');
        }
        $this->container['party_name'] = $party_name;

        return $this;
    }

    /**
     * Gets party_short_name
     *
     * @return string|null
     */
    public function getPartyShortName()
    {
        return $this->container['party_short_name'];
    }

    /**
     * Sets party_short_name
     *
     * @param string|null $party_short_name party_short_name
     *
     * @return self
     */
    public function setPartyShortName($party_short_name)
    {
        if (is_null($party_short_name)) {
            throw new \InvalidArgumentException('non-nullable party_short_name cannot be null');
        }
        $this->container['party_short_name'] = $party_short_name;

        return $this;
    }

    /**
     * Gets free_party_num
     *
     * @return string|null
     */
    public function getFreePartyNum()
    {
        return $this->container['free_party_num'];
    }

    /**
     * Sets free_party_num
     *
     * @param string|null $free_party_num free_party_num
     *
     * @return self
     */
    public function setFreePartyNum($free_party_num)
    {
        if (is_null($free_party_num)) {
            throw new \InvalidArgumentException('non-nullable free_party_num cannot be null');
        }
        $this->container['free_party_num'] = $free_party_num;

        return $this;
    }

    /**
     * Gets invoice_count
     *
     * @return int|null
     */
    public function getInvoiceCount()
    {
        return $this->container['invoice_count'];
    }

    /**
     * Sets invoice_count
     *
     * @param int|null $invoice_count invoice_count
     *
     * @return self
     */
    public function setInvoiceCount($invoice_count)
    {
        if (is_null($invoice_count)) {
            throw new \InvalidArgumentException('non-nullable invoice_count cannot be null');
        }
        $this->container['invoice_count'] = $invoice_count;

        return $this;
    }

    /**
     * Gets payment_details
     *
     * @return \OpenAPI\Client\Model\PaymentDetail[]|null
     */
    public function getPaymentDetails()
    {
        return $this->container['payment_details'];
    }

    /**
     * Sets payment_details
     *
     * @param \OpenAPI\Client\Model\PaymentDetail[]|null $payment_details payment_details
     *
     * @return self
     */
    public function setPaymentDetails($payment_details)
    {
        if (is_null($payment_details)) {
            throw new \InvalidArgumentException('non-nullable payment_details cannot be null');
        }
        $this->container['payment_details'] = $payment_details;

        return $this;
    }

    /**
     * Gets transaction
     *
     * @return \OpenAPI\Client\Model\Transaction|null
     */
    public function getTransaction()
    {
        return $this->container['transaction'];
    }

    /**
     * Sets transaction
     *
     * @param \OpenAPI\Client\Model\Transaction|null $transaction transaction
     *
     * @return self
     */
    public function setTransaction($transaction)
    {
        if (is_null($transaction)) {
            throw new \InvalidArgumentException('non-nullable transaction cannot be null');
        }
        $this->container['transaction'] = $transaction;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


