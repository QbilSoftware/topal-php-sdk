<?php
/**
 * Posting
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Topal REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Topal\Client\Model;

use \ArrayAccess;
use \Topal\Client\ObjectSerializer;

/**
 * Posting Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Posting implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Posting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'transaction_fid' => 'string',
        'invoice_fid' => 'string',
        'account_fid' => 'int',
        'contra_account_fid' => 'int',
        'vat_fid' => 'int',
        'vat_account_fid' => 'int',
        'cost_center_fid' => 'int',
        'posting_type_fid' => 'int',
        'amount' => 'float',
        'fc_amount' => 'float',
        'exchange_rate' => 'float',
        'vat_amount' => 'float',
        'vat_fc_amount' => 'float',
        'vat_percent' => 'float',
        'vat_quote' => 'float',
        'text' => 'string',
        'free_code' => 'string',
        'is_debit' => 'bool',
        'is_inclusive' => 'bool',
        'is_invisible' => 'bool',
        'posting_index' => 'int',
        'party_num' => 'int',
        'freeparty_num' => 'string',
        'party_name' => 'string',
        'invoice_num' => 'int',
        'free_invoice_num' => 'string',
        'invoice_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'transaction_fid' => 'uuid',
        'invoice_fid' => 'uuid',
        'account_fid' => 'int32',
        'contra_account_fid' => 'int32',
        'vat_fid' => 'int32',
        'vat_account_fid' => 'int32',
        'cost_center_fid' => 'int32',
        'posting_type_fid' => 'int32',
        'amount' => 'double',
        'fc_amount' => 'double',
        'exchange_rate' => 'double',
        'vat_amount' => 'double',
        'vat_fc_amount' => 'double',
        'vat_percent' => 'double',
        'vat_quote' => 'double',
        'text' => null,
        'free_code' => null,
        'is_debit' => null,
        'is_inclusive' => null,
        'is_invisible' => null,
        'posting_index' => 'int32',
        'party_num' => 'int32',
        'freeparty_num' => null,
        'party_name' => null,
        'invoice_num' => 'int32',
        'free_invoice_num' => null,
        'invoice_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'transaction_fid' => false,
        'invoice_fid' => false,
        'account_fid' => false,
        'contra_account_fid' => false,
        'vat_fid' => false,
        'vat_account_fid' => false,
        'cost_center_fid' => false,
        'posting_type_fid' => false,
        'amount' => false,
        'fc_amount' => false,
        'exchange_rate' => false,
        'vat_amount' => false,
        'vat_fc_amount' => false,
        'vat_percent' => false,
        'vat_quote' => false,
        'text' => false,
        'free_code' => false,
        'is_debit' => false,
        'is_inclusive' => false,
        'is_invisible' => false,
        'posting_index' => false,
        'party_num' => false,
        'freeparty_num' => false,
        'party_name' => false,
        'invoice_num' => false,
        'free_invoice_num' => false,
        'invoice_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'transaction_fid' => 'transactionFID',
        'invoice_fid' => 'invoiceFID',
        'account_fid' => 'accountFID',
        'contra_account_fid' => 'contraAccountFID',
        'vat_fid' => 'vatFID',
        'vat_account_fid' => 'vatAccountFID',
        'cost_center_fid' => 'costCenterFID',
        'posting_type_fid' => 'postingTypeFID',
        'amount' => 'amount',
        'fc_amount' => 'fcAmount',
        'exchange_rate' => 'exchangeRate',
        'vat_amount' => 'vatAmount',
        'vat_fc_amount' => 'vatFcAmount',
        'vat_percent' => 'vatPercent',
        'vat_quote' => 'vatQuote',
        'text' => 'text',
        'free_code' => 'freeCode',
        'is_debit' => 'isDebit',
        'is_inclusive' => 'isInclusive',
        'is_invisible' => 'isInvisible',
        'posting_index' => 'postingIndex',
        'party_num' => 'partyNum',
        'freeparty_num' => 'freepartyNum',
        'party_name' => 'partyName',
        'invoice_num' => 'invoiceNum',
        'free_invoice_num' => 'freeInvoiceNum',
        'invoice_date' => 'invoiceDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'transaction_fid' => 'setTransactionFid',
        'invoice_fid' => 'setInvoiceFid',
        'account_fid' => 'setAccountFid',
        'contra_account_fid' => 'setContraAccountFid',
        'vat_fid' => 'setVatFid',
        'vat_account_fid' => 'setVatAccountFid',
        'cost_center_fid' => 'setCostCenterFid',
        'posting_type_fid' => 'setPostingTypeFid',
        'amount' => 'setAmount',
        'fc_amount' => 'setFcAmount',
        'exchange_rate' => 'setExchangeRate',
        'vat_amount' => 'setVatAmount',
        'vat_fc_amount' => 'setVatFcAmount',
        'vat_percent' => 'setVatPercent',
        'vat_quote' => 'setVatQuote',
        'text' => 'setText',
        'free_code' => 'setFreeCode',
        'is_debit' => 'setIsDebit',
        'is_inclusive' => 'setIsInclusive',
        'is_invisible' => 'setIsInvisible',
        'posting_index' => 'setPostingIndex',
        'party_num' => 'setPartyNum',
        'freeparty_num' => 'setFreepartyNum',
        'party_name' => 'setPartyName',
        'invoice_num' => 'setInvoiceNum',
        'free_invoice_num' => 'setFreeInvoiceNum',
        'invoice_date' => 'setInvoiceDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'transaction_fid' => 'getTransactionFid',
        'invoice_fid' => 'getInvoiceFid',
        'account_fid' => 'getAccountFid',
        'contra_account_fid' => 'getContraAccountFid',
        'vat_fid' => 'getVatFid',
        'vat_account_fid' => 'getVatAccountFid',
        'cost_center_fid' => 'getCostCenterFid',
        'posting_type_fid' => 'getPostingTypeFid',
        'amount' => 'getAmount',
        'fc_amount' => 'getFcAmount',
        'exchange_rate' => 'getExchangeRate',
        'vat_amount' => 'getVatAmount',
        'vat_fc_amount' => 'getVatFcAmount',
        'vat_percent' => 'getVatPercent',
        'vat_quote' => 'getVatQuote',
        'text' => 'getText',
        'free_code' => 'getFreeCode',
        'is_debit' => 'getIsDebit',
        'is_inclusive' => 'getIsInclusive',
        'is_invisible' => 'getIsInvisible',
        'posting_index' => 'getPostingIndex',
        'party_num' => 'getPartyNum',
        'freeparty_num' => 'getFreepartyNum',
        'party_name' => 'getPartyName',
        'invoice_num' => 'getInvoiceNum',
        'free_invoice_num' => 'getFreeInvoiceNum',
        'invoice_date' => 'getInvoiceDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('transaction_fid', $data ?? [], null);
        $this->setIfExists('invoice_fid', $data ?? [], null);
        $this->setIfExists('account_fid', $data ?? [], null);
        $this->setIfExists('contra_account_fid', $data ?? [], null);
        $this->setIfExists('vat_fid', $data ?? [], null);
        $this->setIfExists('vat_account_fid', $data ?? [], null);
        $this->setIfExists('cost_center_fid', $data ?? [], null);
        $this->setIfExists('posting_type_fid', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('fc_amount', $data ?? [], null);
        $this->setIfExists('exchange_rate', $data ?? [], null);
        $this->setIfExists('vat_amount', $data ?? [], null);
        $this->setIfExists('vat_fc_amount', $data ?? [], null);
        $this->setIfExists('vat_percent', $data ?? [], null);
        $this->setIfExists('vat_quote', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('free_code', $data ?? [], null);
        $this->setIfExists('is_debit', $data ?? [], null);
        $this->setIfExists('is_inclusive', $data ?? [], null);
        $this->setIfExists('is_invisible', $data ?? [], null);
        $this->setIfExists('posting_index', $data ?? [], null);
        $this->setIfExists('party_num', $data ?? [], null);
        $this->setIfExists('freeparty_num', $data ?? [], null);
        $this->setIfExists('party_name', $data ?? [], null);
        $this->setIfExists('invoice_num', $data ?? [], null);
        $this->setIfExists('free_invoice_num', $data ?? [], null);
        $this->setIfExists('invoice_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_fid'] === null) {
            $invalidProperties[] = "'account_fid' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets transaction_fid
     *
     * @return string|null
     */
    public function getTransactionFid()
    {
        return $this->container['transaction_fid'];
    }

    /**
     * Sets transaction_fid
     *
     * @param string|null $transaction_fid transaction_fid
     *
     * @return self
     */
    public function setTransactionFid($transaction_fid)
    {
        if (is_null($transaction_fid)) {
            throw new \InvalidArgumentException('non-nullable transaction_fid cannot be null');
        }
        $this->container['transaction_fid'] = $transaction_fid;

        return $this;
    }

    /**
     * Gets invoice_fid
     *
     * @return string|null
     */
    public function getInvoiceFid()
    {
        return $this->container['invoice_fid'];
    }

    /**
     * Sets invoice_fid
     *
     * @param string|null $invoice_fid invoice_fid
     *
     * @return self
     */
    public function setInvoiceFid($invoice_fid)
    {
        if (is_null($invoice_fid)) {
            throw new \InvalidArgumentException('non-nullable invoice_fid cannot be null');
        }
        $this->container['invoice_fid'] = $invoice_fid;

        return $this;
    }

    /**
     * Gets account_fid
     *
     * @return int
     */
    public function getAccountFid()
    {
        return $this->container['account_fid'];
    }

    /**
     * Sets account_fid
     *
     * @param int $account_fid account_fid
     *
     * @return self
     */
    public function setAccountFid($account_fid)
    {
        if (is_null($account_fid)) {
            throw new \InvalidArgumentException('non-nullable account_fid cannot be null');
        }
        $this->container['account_fid'] = $account_fid;

        return $this;
    }

    /**
     * Gets contra_account_fid
     *
     * @return int|null
     */
    public function getContraAccountFid()
    {
        return $this->container['contra_account_fid'];
    }

    /**
     * Sets contra_account_fid
     *
     * @param int|null $contra_account_fid contra_account_fid
     *
     * @return self
     */
    public function setContraAccountFid($contra_account_fid)
    {
        if (is_null($contra_account_fid)) {
            throw new \InvalidArgumentException('non-nullable contra_account_fid cannot be null');
        }
        $this->container['contra_account_fid'] = $contra_account_fid;

        return $this;
    }

    /**
     * Gets vat_fid
     *
     * @return int|null
     */
    public function getVatFid()
    {
        return $this->container['vat_fid'];
    }

    /**
     * Sets vat_fid
     *
     * @param int|null $vat_fid vat_fid
     *
     * @return self
     */
    public function setVatFid($vat_fid)
    {
        if (is_null($vat_fid)) {
            throw new \InvalidArgumentException('non-nullable vat_fid cannot be null');
        }
        $this->container['vat_fid'] = $vat_fid;

        return $this;
    }

    /**
     * Gets vat_account_fid
     *
     * @return int|null
     */
    public function getVatAccountFid()
    {
        return $this->container['vat_account_fid'];
    }

    /**
     * Sets vat_account_fid
     *
     * @param int|null $vat_account_fid vat_account_fid
     *
     * @return self
     */
    public function setVatAccountFid($vat_account_fid)
    {
        if (is_null($vat_account_fid)) {
            throw new \InvalidArgumentException('non-nullable vat_account_fid cannot be null');
        }
        $this->container['vat_account_fid'] = $vat_account_fid;

        return $this;
    }

    /**
     * Gets cost_center_fid
     *
     * @return int|null
     */
    public function getCostCenterFid()
    {
        return $this->container['cost_center_fid'];
    }

    /**
     * Sets cost_center_fid
     *
     * @param int|null $cost_center_fid cost_center_fid
     *
     * @return self
     */
    public function setCostCenterFid($cost_center_fid)
    {
        if (is_null($cost_center_fid)) {
            throw new \InvalidArgumentException('non-nullable cost_center_fid cannot be null');
        }
        $this->container['cost_center_fid'] = $cost_center_fid;

        return $this;
    }

    /**
     * Gets posting_type_fid
     *
     * @return int|null
     */
    public function getPostingTypeFid()
    {
        return $this->container['posting_type_fid'];
    }

    /**
     * Sets posting_type_fid
     *
     * @param int|null $posting_type_fid posting_type_fid
     *
     * @return self
     */
    public function setPostingTypeFid($posting_type_fid)
    {
        if (is_null($posting_type_fid)) {
            throw new \InvalidArgumentException('non-nullable posting_type_fid cannot be null');
        }
        $this->container['posting_type_fid'] = $posting_type_fid;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets fc_amount
     *
     * @return float|null
     */
    public function getFcAmount()
    {
        return $this->container['fc_amount'];
    }

    /**
     * Sets fc_amount
     *
     * @param float|null $fc_amount fc_amount
     *
     * @return self
     */
    public function setFcAmount($fc_amount)
    {
        if (is_null($fc_amount)) {
            throw new \InvalidArgumentException('non-nullable fc_amount cannot be null');
        }
        $this->container['fc_amount'] = $fc_amount;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return float|null
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param float|null $exchange_rate exchange_rate
     *
     * @return self
     */
    public function setExchangeRate($exchange_rate)
    {
        if (is_null($exchange_rate)) {
            throw new \InvalidArgumentException('non-nullable exchange_rate cannot be null');
        }
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets vat_amount
     *
     * @return float|null
     */
    public function getVatAmount()
    {
        return $this->container['vat_amount'];
    }

    /**
     * Sets vat_amount
     *
     * @param float|null $vat_amount vat_amount
     *
     * @return self
     */
    public function setVatAmount($vat_amount)
    {
        if (is_null($vat_amount)) {
            throw new \InvalidArgumentException('non-nullable vat_amount cannot be null');
        }
        $this->container['vat_amount'] = $vat_amount;

        return $this;
    }

    /**
     * Gets vat_fc_amount
     *
     * @return float|null
     */
    public function getVatFcAmount()
    {
        return $this->container['vat_fc_amount'];
    }

    /**
     * Sets vat_fc_amount
     *
     * @param float|null $vat_fc_amount vat_fc_amount
     *
     * @return self
     */
    public function setVatFcAmount($vat_fc_amount)
    {
        if (is_null($vat_fc_amount)) {
            throw new \InvalidArgumentException('non-nullable vat_fc_amount cannot be null');
        }
        $this->container['vat_fc_amount'] = $vat_fc_amount;

        return $this;
    }

    /**
     * Gets vat_percent
     *
     * @return float|null
     */
    public function getVatPercent()
    {
        return $this->container['vat_percent'];
    }

    /**
     * Sets vat_percent
     *
     * @param float|null $vat_percent vat_percent
     *
     * @return self
     */
    public function setVatPercent($vat_percent)
    {
        if (is_null($vat_percent)) {
            throw new \InvalidArgumentException('non-nullable vat_percent cannot be null');
        }
        $this->container['vat_percent'] = $vat_percent;

        return $this;
    }

    /**
     * Gets vat_quote
     *
     * @return float|null
     */
    public function getVatQuote()
    {
        return $this->container['vat_quote'];
    }

    /**
     * Sets vat_quote
     *
     * @param float|null $vat_quote vat_quote
     *
     * @return self
     */
    public function setVatQuote($vat_quote)
    {
        if (is_null($vat_quote)) {
            throw new \InvalidArgumentException('non-nullable vat_quote cannot be null');
        }
        $this->container['vat_quote'] = $vat_quote;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text text
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets free_code
     *
     * @return string|null
     */
    public function getFreeCode()
    {
        return $this->container['free_code'];
    }

    /**
     * Sets free_code
     *
     * @param string|null $free_code free_code
     *
     * @return self
     */
    public function setFreeCode($free_code)
    {
        if (is_null($free_code)) {
            throw new \InvalidArgumentException('non-nullable free_code cannot be null');
        }
        $this->container['free_code'] = $free_code;

        return $this;
    }

    /**
     * Gets is_debit
     *
     * @return bool|null
     */
    public function getIsDebit()
    {
        return $this->container['is_debit'];
    }

    /**
     * Sets is_debit
     *
     * @param bool|null $is_debit is_debit
     *
     * @return self
     */
    public function setIsDebit($is_debit)
    {
        if (is_null($is_debit)) {
            throw new \InvalidArgumentException('non-nullable is_debit cannot be null');
        }
        $this->container['is_debit'] = $is_debit;

        return $this;
    }

    /**
     * Gets is_inclusive
     *
     * @return bool|null
     */
    public function getIsInclusive()
    {
        return $this->container['is_inclusive'];
    }

    /**
     * Sets is_inclusive
     *
     * @param bool|null $is_inclusive is_inclusive
     *
     * @return self
     */
    public function setIsInclusive($is_inclusive)
    {
        if (is_null($is_inclusive)) {
            throw new \InvalidArgumentException('non-nullable is_inclusive cannot be null');
        }
        $this->container['is_inclusive'] = $is_inclusive;

        return $this;
    }

    /**
     * Gets is_invisible
     *
     * @return bool|null
     */
    public function getIsInvisible()
    {
        return $this->container['is_invisible'];
    }

    /**
     * Sets is_invisible
     *
     * @param bool|null $is_invisible is_invisible
     *
     * @return self
     */
    public function setIsInvisible($is_invisible)
    {
        if (is_null($is_invisible)) {
            throw new \InvalidArgumentException('non-nullable is_invisible cannot be null');
        }
        $this->container['is_invisible'] = $is_invisible;

        return $this;
    }

    /**
     * Gets posting_index
     *
     * @return int|null
     */
    public function getPostingIndex()
    {
        return $this->container['posting_index'];
    }

    /**
     * Sets posting_index
     *
     * @param int|null $posting_index posting_index
     *
     * @return self
     */
    public function setPostingIndex($posting_index)
    {
        if (is_null($posting_index)) {
            throw new \InvalidArgumentException('non-nullable posting_index cannot be null');
        }
        $this->container['posting_index'] = $posting_index;

        return $this;
    }

    /**
     * Gets party_num
     *
     * @return int|null
     */
    public function getPartyNum()
    {
        return $this->container['party_num'];
    }

    /**
     * Sets party_num
     *
     * @param int|null $party_num party_num
     *
     * @return self
     */
    public function setPartyNum($party_num)
    {
        if (is_null($party_num)) {
            throw new \InvalidArgumentException('non-nullable party_num cannot be null');
        }
        $this->container['party_num'] = $party_num;

        return $this;
    }

    /**
     * Gets freeparty_num
     *
     * @return string|null
     */
    public function getFreepartyNum()
    {
        return $this->container['freeparty_num'];
    }

    /**
     * Sets freeparty_num
     *
     * @param string|null $freeparty_num freeparty_num
     *
     * @return self
     */
    public function setFreepartyNum($freeparty_num)
    {
        if (is_null($freeparty_num)) {
            throw new \InvalidArgumentException('non-nullable freeparty_num cannot be null');
        }
        $this->container['freeparty_num'] = $freeparty_num;

        return $this;
    }

    /**
     * Gets party_name
     *
     * @return string|null
     */
    public function getPartyName()
    {
        return $this->container['party_name'];
    }

    /**
     * Sets party_name
     *
     * @param string|null $party_name party_name
     *
     * @return self
     */
    public function setPartyName($party_name)
    {
        if (is_null($party_name)) {
            throw new \InvalidArgumentException('non-nullable party_name cannot be null');
        }
        $this->container['party_name'] = $party_name;

        return $this;
    }

    /**
     * Gets invoice_num
     *
     * @return int|null
     */
    public function getInvoiceNum()
    {
        return $this->container['invoice_num'];
    }

    /**
     * Sets invoice_num
     *
     * @param int|null $invoice_num invoice_num
     *
     * @return self
     */
    public function setInvoiceNum($invoice_num)
    {
        if (is_null($invoice_num)) {
            throw new \InvalidArgumentException('non-nullable invoice_num cannot be null');
        }
        $this->container['invoice_num'] = $invoice_num;

        return $this;
    }

    /**
     * Gets free_invoice_num
     *
     * @return string|null
     */
    public function getFreeInvoiceNum()
    {
        return $this->container['free_invoice_num'];
    }

    /**
     * Sets free_invoice_num
     *
     * @param string|null $free_invoice_num free_invoice_num
     *
     * @return self
     */
    public function setFreeInvoiceNum($free_invoice_num)
    {
        if (is_null($free_invoice_num)) {
            throw new \InvalidArgumentException('non-nullable free_invoice_num cannot be null');
        }
        $this->container['free_invoice_num'] = $free_invoice_num;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return \DateTime|null
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param \DateTime|null $invoice_date invoice_date
     *
     * @return self
     */
    public function setInvoiceDate($invoice_date)
    {
        if (is_null($invoice_date)) {
            throw new \InvalidArgumentException('non-nullable invoice_date cannot be null');
        }
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


