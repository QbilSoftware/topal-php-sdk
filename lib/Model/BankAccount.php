<?php
/**
 * BankAccount
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Topal REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Topal\Client\Model;

use \ArrayAccess;
use \Topal\Client\ObjectSerializer;

/**
 * BankAccount Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BankAccount implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BankAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'iban' => 'string',
        'account_num' => 'string',
        'credit_line' => 'float',
        'account_fid' => 'int',
        'bank_fid' => 'int',
        'bank_account_type_fid' => 'int',
        'account_code' => 'string',
        'bank_code' => 'string',
        'currency_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'name' => null,
        'iban' => null,
        'account_num' => null,
        'credit_line' => 'double',
        'account_fid' => 'int32',
        'bank_fid' => 'int32',
        'bank_account_type_fid' => 'int32',
        'account_code' => null,
        'bank_code' => null,
        'currency_code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'iban' => false,
        'account_num' => false,
        'credit_line' => false,
        'account_fid' => false,
        'bank_fid' => false,
        'bank_account_type_fid' => false,
        'account_code' => false,
        'bank_code' => false,
        'currency_code' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'iban' => 'iban',
        'account_num' => 'accountNum',
        'credit_line' => 'creditLine',
        'account_fid' => 'accountFID',
        'bank_fid' => 'bankFID',
        'bank_account_type_fid' => 'bankAccountTypeFID',
        'account_code' => 'accountCode',
        'bank_code' => 'bankCode',
        'currency_code' => 'currencyCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'iban' => 'setIban',
        'account_num' => 'setAccountNum',
        'credit_line' => 'setCreditLine',
        'account_fid' => 'setAccountFid',
        'bank_fid' => 'setBankFid',
        'bank_account_type_fid' => 'setBankAccountTypeFid',
        'account_code' => 'setAccountCode',
        'bank_code' => 'setBankCode',
        'currency_code' => 'setCurrencyCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'iban' => 'getIban',
        'account_num' => 'getAccountNum',
        'credit_line' => 'getCreditLine',
        'account_fid' => 'getAccountFid',
        'bank_fid' => 'getBankFid',
        'bank_account_type_fid' => 'getBankAccountTypeFid',
        'account_code' => 'getAccountCode',
        'bank_code' => 'getBankCode',
        'currency_code' => 'getCurrencyCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('iban', $data ?? [], null);
        $this->setIfExists('account_num', $data ?? [], null);
        $this->setIfExists('credit_line', $data ?? [], null);
        $this->setIfExists('account_fid', $data ?? [], null);
        $this->setIfExists('bank_fid', $data ?? [], null);
        $this->setIfExists('bank_account_type_fid', $data ?? [], null);
        $this->setIfExists('account_code', $data ?? [], null);
        $this->setIfExists('bank_code', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 52)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 52.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 52)) {
            throw new \InvalidArgumentException('invalid length for $name when calling BankAccount., must be smaller than or equal to 52.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling BankAccount., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string|null
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string|null $iban iban
     *
     * @return self
     */
    public function setIban($iban)
    {
        if (is_null($iban)) {
            throw new \InvalidArgumentException('non-nullable iban cannot be null');
        }
        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets account_num
     *
     * @return string|null
     */
    public function getAccountNum()
    {
        return $this->container['account_num'];
    }

    /**
     * Sets account_num
     *
     * @param string|null $account_num account_num
     *
     * @return self
     */
    public function setAccountNum($account_num)
    {
        if (is_null($account_num)) {
            throw new \InvalidArgumentException('non-nullable account_num cannot be null');
        }
        $this->container['account_num'] = $account_num;

        return $this;
    }

    /**
     * Gets credit_line
     *
     * @return float|null
     */
    public function getCreditLine()
    {
        return $this->container['credit_line'];
    }

    /**
     * Sets credit_line
     *
     * @param float|null $credit_line credit_line
     *
     * @return self
     */
    public function setCreditLine($credit_line)
    {
        if (is_null($credit_line)) {
            throw new \InvalidArgumentException('non-nullable credit_line cannot be null');
        }
        $this->container['credit_line'] = $credit_line;

        return $this;
    }

    /**
     * Gets account_fid
     *
     * @return int|null
     */
    public function getAccountFid()
    {
        return $this->container['account_fid'];
    }

    /**
     * Sets account_fid
     *
     * @param int|null $account_fid account_fid
     *
     * @return self
     */
    public function setAccountFid($account_fid)
    {
        if (is_null($account_fid)) {
            throw new \InvalidArgumentException('non-nullable account_fid cannot be null');
        }
        $this->container['account_fid'] = $account_fid;

        return $this;
    }

    /**
     * Gets bank_fid
     *
     * @return int|null
     */
    public function getBankFid()
    {
        return $this->container['bank_fid'];
    }

    /**
     * Sets bank_fid
     *
     * @param int|null $bank_fid bank_fid
     *
     * @return self
     */
    public function setBankFid($bank_fid)
    {
        if (is_null($bank_fid)) {
            throw new \InvalidArgumentException('non-nullable bank_fid cannot be null');
        }
        $this->container['bank_fid'] = $bank_fid;

        return $this;
    }

    /**
     * Gets bank_account_type_fid
     *
     * @return int|null
     */
    public function getBankAccountTypeFid()
    {
        return $this->container['bank_account_type_fid'];
    }

    /**
     * Sets bank_account_type_fid
     *
     * @param int|null $bank_account_type_fid bank_account_type_fid
     *
     * @return self
     */
    public function setBankAccountTypeFid($bank_account_type_fid)
    {
        if (is_null($bank_account_type_fid)) {
            throw new \InvalidArgumentException('non-nullable bank_account_type_fid cannot be null');
        }
        $this->container['bank_account_type_fid'] = $bank_account_type_fid;

        return $this;
    }

    /**
     * Gets account_code
     *
     * @return string|null
     */
    public function getAccountCode()
    {
        return $this->container['account_code'];
    }

    /**
     * Sets account_code
     *
     * @param string|null $account_code account_code
     *
     * @return self
     */
    public function setAccountCode($account_code)
    {
        if (is_null($account_code)) {
            throw new \InvalidArgumentException('non-nullable account_code cannot be null');
        }
        $this->container['account_code'] = $account_code;

        return $this;
    }

    /**
     * Gets bank_code
     *
     * @return string|null
     */
    public function getBankCode()
    {
        return $this->container['bank_code'];
    }

    /**
     * Sets bank_code
     *
     * @param string|null $bank_code bank_code
     *
     * @return self
     */
    public function setBankCode($bank_code)
    {
        if (is_null($bank_code)) {
            throw new \InvalidArgumentException('non-nullable bank_code cannot be null');
        }
        $this->container['bank_code'] = $bank_code;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code currency_code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


