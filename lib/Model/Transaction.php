<?php
/**
 * Transaction
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Topal REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Transaction Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Transaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'fiscal_year_fid' => 'int',
        'user_fid' => 'int',
        'transaction_type_fid' => 'int',
        'doc_type' => 'string',
        'doc_num' => 'int',
        'doc_date' => '\DateTime',
        'modify_date' => '\DateTime',
        'is_confirmed' => 'bool',
        'num_range_fid' => 'int',
        'has_document' => 'bool',
        'postings' => '\OpenAPI\Client\Model\Posting[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'fiscal_year_fid' => 'int32',
        'user_fid' => 'int32',
        'transaction_type_fid' => 'int32',
        'doc_type' => null,
        'doc_num' => 'int32',
        'doc_date' => 'date-time',
        'modify_date' => 'date-time',
        'is_confirmed' => null,
        'num_range_fid' => 'int32',
        'has_document' => null,
        'postings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'fiscal_year_fid' => false,
        'user_fid' => false,
        'transaction_type_fid' => false,
        'doc_type' => false,
        'doc_num' => false,
        'doc_date' => false,
        'modify_date' => false,
        'is_confirmed' => false,
        'num_range_fid' => false,
        'has_document' => false,
        'postings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'fiscal_year_fid' => 'fiscalYearFID',
        'user_fid' => 'userFID',
        'transaction_type_fid' => 'transactionTypeFID',
        'doc_type' => 'docType',
        'doc_num' => 'docNum',
        'doc_date' => 'docDate',
        'modify_date' => 'modifyDate',
        'is_confirmed' => 'isConfirmed',
        'num_range_fid' => 'numRangeFID',
        'has_document' => 'hasDocument',
        'postings' => 'postings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'fiscal_year_fid' => 'setFiscalYearFid',
        'user_fid' => 'setUserFid',
        'transaction_type_fid' => 'setTransactionTypeFid',
        'doc_type' => 'setDocType',
        'doc_num' => 'setDocNum',
        'doc_date' => 'setDocDate',
        'modify_date' => 'setModifyDate',
        'is_confirmed' => 'setIsConfirmed',
        'num_range_fid' => 'setNumRangeFid',
        'has_document' => 'setHasDocument',
        'postings' => 'setPostings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'fiscal_year_fid' => 'getFiscalYearFid',
        'user_fid' => 'getUserFid',
        'transaction_type_fid' => 'getTransactionTypeFid',
        'doc_type' => 'getDocType',
        'doc_num' => 'getDocNum',
        'doc_date' => 'getDocDate',
        'modify_date' => 'getModifyDate',
        'is_confirmed' => 'getIsConfirmed',
        'num_range_fid' => 'getNumRangeFid',
        'has_document' => 'getHasDocument',
        'postings' => 'getPostings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('fiscal_year_fid', $data ?? [], null);
        $this->setIfExists('user_fid', $data ?? [], null);
        $this->setIfExists('transaction_type_fid', $data ?? [], null);
        $this->setIfExists('doc_type', $data ?? [], null);
        $this->setIfExists('doc_num', $data ?? [], null);
        $this->setIfExists('doc_date', $data ?? [], null);
        $this->setIfExists('modify_date', $data ?? [], null);
        $this->setIfExists('is_confirmed', $data ?? [], null);
        $this->setIfExists('num_range_fid', $data ?? [], null);
        $this->setIfExists('has_document', $data ?? [], null);
        $this->setIfExists('postings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['doc_num'] === null) {
            $invalidProperties[] = "'doc_num' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets fiscal_year_fid
     *
     * @return int|null
     */
    public function getFiscalYearFid()
    {
        return $this->container['fiscal_year_fid'];
    }

    /**
     * Sets fiscal_year_fid
     *
     * @param int|null $fiscal_year_fid fiscal_year_fid
     *
     * @return self
     */
    public function setFiscalYearFid($fiscal_year_fid)
    {
        if (is_null($fiscal_year_fid)) {
            throw new \InvalidArgumentException('non-nullable fiscal_year_fid cannot be null');
        }
        $this->container['fiscal_year_fid'] = $fiscal_year_fid;

        return $this;
    }

    /**
     * Gets user_fid
     *
     * @return int|null
     */
    public function getUserFid()
    {
        return $this->container['user_fid'];
    }

    /**
     * Sets user_fid
     *
     * @param int|null $user_fid user_fid
     *
     * @return self
     */
    public function setUserFid($user_fid)
    {
        if (is_null($user_fid)) {
            throw new \InvalidArgumentException('non-nullable user_fid cannot be null');
        }
        $this->container['user_fid'] = $user_fid;

        return $this;
    }

    /**
     * Gets transaction_type_fid
     *
     * @return int|null
     */
    public function getTransactionTypeFid()
    {
        return $this->container['transaction_type_fid'];
    }

    /**
     * Sets transaction_type_fid
     *
     * @param int|null $transaction_type_fid transaction_type_fid
     *
     * @return self
     */
    public function setTransactionTypeFid($transaction_type_fid)
    {
        if (is_null($transaction_type_fid)) {
            throw new \InvalidArgumentException('non-nullable transaction_type_fid cannot be null');
        }
        $this->container['transaction_type_fid'] = $transaction_type_fid;

        return $this;
    }

    /**
     * Gets doc_type
     *
     * @return string|null
     */
    public function getDocType()
    {
        return $this->container['doc_type'];
    }

    /**
     * Sets doc_type
     *
     * @param string|null $doc_type doc_type
     *
     * @return self
     */
    public function setDocType($doc_type)
    {
        if (is_null($doc_type)) {
            throw new \InvalidArgumentException('non-nullable doc_type cannot be null');
        }
        $this->container['doc_type'] = $doc_type;

        return $this;
    }

    /**
     * Gets doc_num
     *
     * @return int
     */
    public function getDocNum()
    {
        return $this->container['doc_num'];
    }

    /**
     * Sets doc_num
     *
     * @param int $doc_num doc_num
     *
     * @return self
     */
    public function setDocNum($doc_num)
    {
        if (is_null($doc_num)) {
            throw new \InvalidArgumentException('non-nullable doc_num cannot be null');
        }
        $this->container['doc_num'] = $doc_num;

        return $this;
    }

    /**
     * Gets doc_date
     *
     * @return \DateTime|null
     */
    public function getDocDate()
    {
        return $this->container['doc_date'];
    }

    /**
     * Sets doc_date
     *
     * @param \DateTime|null $doc_date doc_date
     *
     * @return self
     */
    public function setDocDate($doc_date)
    {
        if (is_null($doc_date)) {
            throw new \InvalidArgumentException('non-nullable doc_date cannot be null');
        }
        $this->container['doc_date'] = $doc_date;

        return $this;
    }

    /**
     * Gets modify_date
     *
     * @return \DateTime|null
     */
    public function getModifyDate()
    {
        return $this->container['modify_date'];
    }

    /**
     * Sets modify_date
     *
     * @param \DateTime|null $modify_date modify_date
     *
     * @return self
     */
    public function setModifyDate($modify_date)
    {
        if (is_null($modify_date)) {
            throw new \InvalidArgumentException('non-nullable modify_date cannot be null');
        }
        $this->container['modify_date'] = $modify_date;

        return $this;
    }

    /**
     * Gets is_confirmed
     *
     * @return bool|null
     */
    public function getIsConfirmed()
    {
        return $this->container['is_confirmed'];
    }

    /**
     * Sets is_confirmed
     *
     * @param bool|null $is_confirmed is_confirmed
     *
     * @return self
     */
    public function setIsConfirmed($is_confirmed)
    {
        if (is_null($is_confirmed)) {
            throw new \InvalidArgumentException('non-nullable is_confirmed cannot be null');
        }
        $this->container['is_confirmed'] = $is_confirmed;

        return $this;
    }

    /**
     * Gets num_range_fid
     *
     * @return int|null
     */
    public function getNumRangeFid()
    {
        return $this->container['num_range_fid'];
    }

    /**
     * Sets num_range_fid
     *
     * @param int|null $num_range_fid num_range_fid
     *
     * @return self
     */
    public function setNumRangeFid($num_range_fid)
    {
        if (is_null($num_range_fid)) {
            throw new \InvalidArgumentException('non-nullable num_range_fid cannot be null');
        }
        $this->container['num_range_fid'] = $num_range_fid;

        return $this;
    }

    /**
     * Gets has_document
     *
     * @return bool|null
     */
    public function getHasDocument()
    {
        return $this->container['has_document'];
    }

    /**
     * Sets has_document
     *
     * @param bool|null $has_document has_document
     *
     * @return self
     */
    public function setHasDocument($has_document)
    {
        if (is_null($has_document)) {
            throw new \InvalidArgumentException('non-nullable has_document cannot be null');
        }
        $this->container['has_document'] = $has_document;

        return $this;
    }

    /**
     * Gets postings
     *
     * @return \OpenAPI\Client\Model\Posting[]|null
     */
    public function getPostings()
    {
        return $this->container['postings'];
    }

    /**
     * Sets postings
     *
     * @param \OpenAPI\Client\Model\Posting[]|null $postings postings
     *
     * @return self
     */
    public function setPostings($postings)
    {
        if (is_null($postings)) {
            throw new \InvalidArgumentException('non-nullable postings cannot be null');
        }
        $this->container['postings'] = $postings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


